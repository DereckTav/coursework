{"ts":"2025-05-29T22:05:18.604Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","initialContent":"library(tidyverse)\r\nlibrary(lubridate)\r\n\r\n########################################\r\n# READ AND TRANSFORM THE DATA\r\n########################################\r\n\r\n# read one month of data\r\ntrips <- read_csv('week1/201402-citibike-tripdata.csv')\r\n\r\n# replace spaces in column names with underscores\r\nnames(trips) <- gsub(' ', '_', names(trips))\r\n\r\n# convert dates strings to dates\r\n# trips <- mutate(trips, starttime = mdy_hms(starttime), stoptime = mdy_hms(stoptime))\r\n\r\n# recode gender as a factor 0->\"Unknown\", 1->\"Male\", 2->\"Female\"\r\ntrips <- mutate(trips, gender = factor(gender, levels=c(0,1,2), labels = c(\"Unknown\",\"Male\",\"Female\")))\r\n\r\n########################################\r\n# YOUR SOLUTIONS BELOW\r\n########################################\r\n\r\n# count the number of trips (= rows in the data frame)\r\ntrips |> summarize(count = n())\r\n\r\n# find the earliest and latest birth years (see help for max and min to deal with NAs)\r\ntrips |> summarize(min_birth_year = min(as.numeric(birth_year), na.rm=T))\r\n\r\n# use filter and grepl to find all trips that either start or end on broadway\r\ntrips_or_broadway <- trips |> filter(grepl('Broadway', start_station_name) | grepl('Broadway', end_station_name))\r\n\r\n# do the same, but find all trips that both start and end on broadway\r\ntrips_and_broadway <- trips |> filter(grepl('Broadway', start_station_name), grepl('Broadway', end_station_name)) |> view()\r\n\r\n# find all unique station names\r\nstations_unique <- unique(c(select(trips, start_station_name), select(trips, end_station_name)))\r\n\r\n# count the number of trips by gender, the average trip time by gender, and the standard deviation in trip time by gender\r\n# do this all at once, by using summarize() with multiple arguments\r\n\r\ntrips |>\r\n    group_by(gender) |>\r\n     summarize(num_trips = n(),\r\n            mean_trip_length = mean(tripduration, na.rm=TRUE)/60,\r\n            sd_trip_length = sd(tripduration, na.rm=TRUE)/60)\r\n\r\n# find the 10 most frequent station-to-station trips\r\ntrips |> group_by(start_station_name, end_station_name) |> summarize(count = n()) |> arrange(desc(count)) |> head(10)\r\n\r\n\r\n# find the top 3 end stations for trips starting from each start station\r\ntrips |> count(start_station_name, end_station_name) |> group_by(start_station_name) |> arrange(desc(n)) |> slice(1:3)\r\n\r\n\r\n# find the top 3 most common station-to-station trips by gender\r\ntrips |> count(gender, start_station_name, end_station_name) |> group_by(gender) |> arrange(desc(n)) |> slice(1:3)\r\n\r\n\r\n# find the day with the most trips\r\n# tip: first add a column for year/month/day without time of day (use as.Date or floor_date from the lubridate package)\r\ntrips |> select(starttime, stoptime) |> mutate(startday=floor_date(starttime, unit = \"day\"),\r\n                                                 endday=floor_date(stoptime, unit = \"day\"))\r\n\r\n\r\n# compute the average number of trips taken during each of the 24 hours of the day across the entire month\r\n# what time(s) of day tend to be peak hour(s)?\r\n\r\n"}}
{"ts":"2025-05-29T22:05:18.607Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","focusedAt":"2025-05-29T22:05:18.607Z"}}
{"ts":"2025-05-29T22:10:08.453Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-29T22:10:08.453Z","focusDurationMs":289846}}
{"ts":"2025-05-29T22:10:32.451Z","type":"window-focus","payload":{"focusedAt":"2025-05-29T22:10:32.451Z"}}
{"ts":"2025-05-29T22:10:36.328Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-29T22:10:36.328Z","focusDurationMs":3877,"windowFocusDurationMs":3877}}
{"ts":"2025-05-29T22:10:43.716Z","type":"window-focus","payload":{"focusedAt":"2025-05-29T22:10:43.716Z"}}
{"ts":"2025-05-29T22:11:24.225Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-29T22:11:24.224Z","diff":[{"count":1,"added":false,"removed":true,"value":"trips <- read_csv('week1/201402-citibike-tripdata.csv')\r\n"},{"count":1,"added":true,"removed":false,"value":"trips <- read_csv('201402-citibike-tripdata.csv')\r\n"},{"count":1,"added":false,"removed":true,"value":"\r\n"},{"count":1,"added":true,"removed":false,"value":"trips |> mutate(hour = hour(starttime)) |> count(hour) |> summarize(avg_trips = mean(n)) |> arrange(desc(avg_trips))\r\n"}]}}
{"ts":"2025-05-29T22:11:24.227Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-29T22:11:24.224Z"}}
{"ts":"2025-05-29T22:12:53.713Z","type":"window-focus","payload":{"focusedAt":"2025-05-29T22:12:53.713Z"}}
{"ts":"2025-05-29T22:13:01.543Z","type":"window-focus","payload":{"focusedAt":"2025-05-29T22:13:01.543Z"}}
{"ts":"2025-05-29T22:17:04.945Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-29T22:17:04.944Z","diff":[{"count":1,"added":false,"removed":true,"value":"trips |> mutate(hour = hour(starttime)) |> count(hour) |> summarize(avg_trips = mean(n)) |> arrange(desc(avg_trips))\r\n"},{"count":1,"added":true,"removed":false,"value":"trips |> mutate(hour = hour(starttime)) |> count(hour) |> group_by(hour) |> summarize(avg_trips = mean(n)/28) |> arrange(desc(avg_trips))\r\n"}]}}
{"ts":"2025-05-29T22:17:04.946Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-29T22:17:04.944Z"}}
{"ts":"2025-05-29T22:18:21.542Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-29T22:18:21.540Z"}}
{"ts":"2025-05-29T22:18:21.541Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-29T22:18:21.540Z","diff":[{"count":1,"added":false,"removed":true,"value":"trips |> mutate(hour = hour(starttime)) |> count(hour) |> group_by(hour) |> summarize(avg_trips = mean(n)/28) |> arrange(desc(avg_trips))\r\n"},{"count":1,"added":true,"removed":false,"value":"trips |> mutate(hour = hour(starttime), month = month(starttime)) |> count(hour, month) |> group_by(hour) |> summarize(avg_trips = mean(n)/days_in_month(month)) |> arrange(desc(avg_trips))\r\n"}]}}
{"ts":"2025-05-29T22:18:33.473Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-29T22:18:33.473Z","focusDurationMs":331930,"windowFocusDurationMs":331930}}
{"ts":"2025-05-29T22:18:55.862Z","type":"window-focus","payload":{"focusedAt":"2025-05-29T22:18:55.862Z"}}
{"ts":"2025-05-29T22:19:38.460Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-29T22:19:38.460Z","focusDurationMs":42598,"windowFocusDurationMs":42598}}
{"ts":"2025-05-29T22:19:39.455Z","type":"window-focus","payload":{"focusedAt":"2025-05-29T22:19:39.455Z"}}
{"ts":"2025-05-29T22:19:40.190Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-29T22:19:40.190Z","focusDurationMs":735,"windowFocusDurationMs":735}}
{"ts":"2025-05-29T22:20:45.581Z","type":"window-focus","payload":{"focusedAt":"2025-05-29T22:20:45.581Z"}}
{"ts":"2025-05-29T22:20:46.007Z","type":"window-focus","payload":{"focusedAt":"2025-05-29T22:20:46.007Z"}}
{"ts":"2025-05-29T22:20:47.743Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-29T22:20:47.743Z","focusDurationMs":1736,"windowFocusDurationMs":1736}}
{"ts":"2025-05-29T22:22:16.551Z","type":"window-focus","payload":{"focusedAt":"2025-05-29T22:22:16.551Z"}}
{"ts":"2025-05-29T22:22:18.188Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-29T22:22:18.188Z","focusDurationMs":1637,"windowFocusDurationMs":1637}}
{"ts":"2025-05-29T22:22:23.021Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-29T22:22:23.021Z","focusDurationMs":6470}}
{"ts":"2025-05-29T22:22:23.033Z","type":"window-focus","payload":{"focusedAt":"2025-05-29T22:22:23.032Z"}}
{"ts":"2025-05-30T00:04:52.180Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T00:04:52.180Z","focusDurationMs":6149148,"windowFocusDurationMs":6149148}}
{"ts":"2025-05-30T00:52:39.829Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T00:52:39.829Z","focusDurationMs":9016797}}
{"ts":"2025-05-30T00:52:47.126Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T00:52:47.126Z"}}
{"ts":"2025-05-30T00:53:04.308Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T00:53:04.308Z","focusDurationMs":17182,"windowFocusDurationMs":17182}}
{"ts":"2025-05-30T00:53:11.336Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T00:53:11.336Z","focusDurationMs":24210}}
{"ts":"2025-05-30T00:53:11.348Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T00:53:11.348Z"}}
{"ts":"2025-05-30T00:54:21.356Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T00:54:21.356Z"}}
{"ts":"2025-05-30T00:56:12.358Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T00:56:12.358Z","focusDurationMs":111002,"windowFocusDurationMs":111002}}
{"ts":"2025-05-30T00:56:41.805Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T00:56:41.805Z"}}
{"ts":"2025-05-30T00:59:25.894Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T00:59:25.894Z","focusDurationMs":164089,"windowFocusDurationMs":164089}}
{"ts":"2025-05-30T01:05:30.579Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:05:30.579Z","focusDurationMs":528774}}
{"ts":"2025-05-30T01:05:30.588Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:05:30.588Z"}}
{"ts":"2025-05-30T01:05:46.076Z","type":"file-save-diff","payload":{"uri":"vscode-userdata:/c%3A/Users/ds3/AppData/Roaming/Code/User/profiles/12bec45b/settings.json","savedAt":"2025-05-30T01:05:46.076Z","diff":[{"count":3,"added":true,"removed":false,"value":"{\r\n    \"terminal.integrated.defaultProfile.windows\": \"Git Bash\"\r\n}"}]}}
{"ts":"2025-05-30T01:05:46.077Z","type":"file-save","payload":{"uri":"vscode-userdata:/c%3A/Users/ds3/AppData/Roaming/Code/User/profiles/12bec45b/settings.json","savedAt":"2025-05-30T01:05:46.076Z"}}
{"ts":"2025-05-30T01:05:59.646Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:05:59.646Z","focusDurationMs":29058,"windowFocusDurationMs":29058}}
{"ts":"2025-05-30T01:06:40.583Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:06:40.583Z","focusDurationMs":69995}}
{"ts":"2025-05-30T01:06:51.744Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:06:51.743Z","focusDurationMs":81155}}
{"ts":"2025-05-30T01:06:51.758Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:06:51.758Z"}}
{"ts":"2025-05-30T01:07:17.435Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:07:17.435Z","focusDurationMs":25677,"windowFocusDurationMs":25677}}
{"ts":"2025-05-30T01:07:33.691Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:07:33.691Z"}}
{"ts":"2025-05-30T01:07:35.117Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:07:35.117Z","focusDurationMs":1426,"windowFocusDurationMs":1426}}
{"ts":"2025-05-30T01:08:01.752Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:08:01.752Z","focusDurationMs":28061}}
{"ts":"2025-05-30T01:08:02.212Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:08:02.212Z"}}
{"ts":"2025-05-30T01:08:06.141Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:08:06.141Z"}}
{"ts":"2025-05-30T01:08:08.797Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","initialContent":"#!/bin/bash\n#\n\n# get date\n# parse date in a way where it is just numbers\n# don't select same team member (need to figure out combinations)\n#\n\n\ncd students\n\nname=($(ls | cut -d' ' -f1 | awk -F. '{print $1}'))\n\nday=$(date +%d)\n\ncombination=$((day % 11))\n\nif (( $combination > 6 )); then\n    iterations=$((combination - 6))\n    for ((i=0; i < iterations; i++)); do\n        reserve=${name[1]}\n        for ((j=1; j<12; j+=2)); do\n            if (( j+2 < 12 )); then\n                name[j]=${name[$((j+2))]}\n            else\n                name[j]=${name[$(((j+2) % 12))]}\n            fi\n        done\n        name[11]=$reserve\n    done\nelse\n    for ((i=0; i < combination; i++)); do\n        temp=${name[1]}\n        for ((j=2; j<12; j+=2)); do\n            if (( j == 2)); then\n                name[j-1]=${name[j]}\n            else\n                name[j-2]=${name[j]}\n            fi\n        done\n        name[10]=$temp\n    done\nfi\n\nfor ((i=0; i < 12; i++)); do\n    if (( i % 2 == 0)); then\n        echo \"--------------\"\n    fi\n    echo ${name[i]}\ndone\n\n\n"}}
{"ts":"2025-05-30T01:08:08.832Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:08:08.832Z","focusDurationMs":2691}}
{"ts":"2025-05-30T01:08:08.883Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","focusedAt":"2025-05-30T01:08:08.883Z"}}
{"ts":"2025-05-30T01:09:16.160Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:09:16.160Z"}}
{"ts":"2025-05-30T01:13:14.667Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","blurredAt":"2025-05-30T01:13:14.667Z","focusDurationMs":238507,"windowFocusDurationMs":238507}}
{"ts":"2025-05-30T01:40:40.010Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:40:40.010Z"}}
{"ts":"2025-05-30T01:40:45.451Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","blurredAt":"2025-05-30T01:40:45.451Z","focusDurationMs":5441,"windowFocusDurationMs":5441}}
{"ts":"2025-05-30T01:41:06.452Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:41:06.452Z"}}
{"ts":"2025-05-30T01:41:09.564Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","blurredAt":"2025-05-30T01:41:09.564Z","focusDurationMs":3112,"windowFocusDurationMs":3112}}
{"ts":"2025-05-30T01:43:10.803Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:43:10.803Z"}}
{"ts":"2025-05-30T01:43:11.450Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","blurredAt":"2025-05-30T01:43:11.450Z","focusDurationMs":647,"windowFocusDurationMs":647}}
{"ts":"2025-05-30T01:43:51.350Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:43:51.350Z"}}
{"ts":"2025-05-30T01:45:52.296Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","blurredAt":"2025-05-30T01:45:52.296Z","focusDurationMs":120946,"windowFocusDurationMs":120946}}
{"ts":"2025-05-30T01:46:30.536Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:46:30.535Z"}}
{"ts":"2025-05-30T01:46:33.317Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:46:33.317Z"}}
{"ts":"2025-05-30T01:46:33.344Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","blurredAt":"2025-05-30T01:46:33.344Z","focusDurationMs":27}}
{"ts":"2025-05-30T01:46:33.372Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","focusedAt":"2025-05-30T01:46:33.372Z"}}
{"ts":"2025-05-30T01:46:37.582Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:46:37.582Z","focusDurationMs":4210,"windowFocusDurationMs":4265}}
{"ts":"2025-05-30T01:46:38.305Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:46:38.305Z"}}
{"ts":"2025-05-30T01:46:40.223Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:46:40.223Z","focusDurationMs":1918,"windowFocusDurationMs":1918}}
{"ts":"2025-05-30T01:47:43.342Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:47:43.342Z","focusDurationMs":65037}}
{"ts":"2025-05-30T01:47:48.575Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:47:48.575Z"}}
{"ts":"2025-05-30T01:47:49.579Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:47:49.579Z"}}
{"ts":"2025-05-30T01:47:51.584Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:47:51.584Z","focusDurationMs":2005,"windowFocusDurationMs":2005}}
{"ts":"2025-05-30T01:47:55.080Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:47:55.080Z"}}
{"ts":"2025-05-30T01:48:09.166Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:48:09.166Z","focusDurationMs":14086,"windowFocusDurationMs":14086}}
{"ts":"2025-05-30T01:48:11.347Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:48:11.347Z"}}
{"ts":"2025-05-30T01:48:12.483Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:48:12.483Z","focusDurationMs":1136}}
{"ts":"2025-05-30T01:48:13.602Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:48:13.601Z","windowFocusDurationMs":2254}}
{"ts":"2025-05-30T01:48:15.404Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:48:15.404Z"}}
{"ts":"2025-05-30T01:48:18.085Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:48:18.084Z","windowFocusDurationMs":2680}}
{"ts":"2025-05-30T01:48:19.359Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:48:19.359Z"}}
{"ts":"2025-05-30T01:48:24.474Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:48:24.474Z","windowFocusDurationMs":5115}}
{"ts":"2025-05-30T01:48:25.005Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:48:25.005Z"}}
{"ts":"2025-05-30T01:48:25.729Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:48:25.729Z","windowFocusDurationMs":724}}
{"ts":"2025-05-30T01:48:27.361Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:48:27.361Z"}}
{"ts":"2025-05-30T01:48:31.885Z","type":"file-save-diff","payload":{"uri":"vscode-userdata:/c%3A/Users/ds3/AppData/Roaming/Code/User/profiles/12bec45b/settings.json","savedAt":"2025-05-30T01:48:31.884Z","diff":[{"count":4,"added":true,"removed":false,"value":"{\r\n    \"terminal.integrated.defaultProfile.windows\": \"Git Bash\",\r\n    \"editor.formatOnSave\": true\r\n}"}]}}
{"ts":"2025-05-30T01:48:31.887Z","type":"file-save","payload":{"uri":"vscode-userdata:/c%3A/Users/ds3/AppData/Roaming/Code/User/profiles/12bec45b/settings.json","savedAt":"2025-05-30T01:48:31.884Z"}}
{"ts":"2025-05-30T01:48:32.286Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:48:32.286Z","windowFocusDurationMs":4925}}
{"ts":"2025-05-30T01:48:36.773Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:48:36.773Z"}}
{"ts":"2025-05-30T01:48:42.179Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:48:42.179Z","windowFocusDurationMs":5406}}
{"ts":"2025-05-30T01:48:43.956Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:48:43.956Z"}}
{"ts":"2025-05-30T01:48:45.311Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:48:45.311Z","windowFocusDurationMs":1355}}
{"ts":"2025-05-30T01:48:46.754Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:48:46.754Z"}}
{"ts":"2025-05-30T01:48:51.518Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:48:51.518Z","windowFocusDurationMs":4764}}
{"ts":"2025-05-30T01:48:53.381Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:48:53.381Z"}}
{"ts":"2025-05-30T01:48:55.010Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:48:55.010Z","windowFocusDurationMs":1629}}
{"ts":"2025-05-30T01:48:55.928Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:48:55.928Z"}}
{"ts":"2025-05-30T01:48:58.774Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:48:58.774Z","windowFocusDurationMs":2846}}
{"ts":"2025-05-30T01:49:29.617Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:49:29.617Z"}}
{"ts":"2025-05-30T01:49:32.573Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:49:32.573Z","windowFocusDurationMs":2956}}
{"ts":"2025-05-30T01:49:33.691Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:49:33.691Z"}}
{"ts":"2025-05-30T01:49:34.008Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:49:34.008Z","windowFocusDurationMs":317}}
{"ts":"2025-05-30T01:49:34.989Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:49:34.989Z"}}
{"ts":"2025-05-30T01:49:54.202Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:49:54.202Z","windowFocusDurationMs":19213}}
{"ts":"2025-05-30T01:49:56.771Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:49:56.771Z"}}
{"ts":"2025-05-30T01:49:57.094Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:49:57.094Z","windowFocusDurationMs":323}}
{"ts":"2025-05-30T01:50:08.877Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:50:08.877Z"}}
{"ts":"2025-05-30T01:50:10.888Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:50:10.888Z","windowFocusDurationMs":2011}}
{"ts":"2025-05-30T01:50:11.946Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:50:11.946Z"}}
{"ts":"2025-05-30T01:50:13.772Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:50:13.772Z","windowFocusDurationMs":1826}}
{"ts":"2025-05-30T01:50:15.797Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:50:15.797Z"}}
{"ts":"2025-05-30T01:50:22.288Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:50:22.287Z","windowFocusDurationMs":6490}}
{"ts":"2025-05-30T01:50:25.147Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:50:25.147Z"}}
{"ts":"2025-05-30T01:51:23.381Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:51:23.381Z","windowFocusDurationMs":58234}}
{"ts":"2025-05-30T01:51:43.091Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:51:43.091Z"}}
{"ts":"2025-05-30T01:51:54.250Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:51:54.250Z","windowFocusDurationMs":11159}}
{"ts":"2025-05-30T01:51:59.644Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:51:59.644Z"}}
{"ts":"2025-05-30T01:52:02.009Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:52:02.009Z","windowFocusDurationMs":2365}}
{"ts":"2025-05-30T01:52:03.513Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:52:03.513Z"}}
{"ts":"2025-05-30T01:52:17.908Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:52:17.908Z","windowFocusDurationMs":14395}}
{"ts":"2025-05-30T01:52:18.776Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:52:18.776Z"}}
{"ts":"2025-05-30T01:52:19.186Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:52:19.186Z","windowFocusDurationMs":410}}
{"ts":"2025-05-30T01:52:59.590Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:52:59.590Z"}}
{"ts":"2025-05-30T01:53:36.428Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:53:36.428Z"}}
{"ts":"2025-05-30T01:53:37.252Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:53:37.252Z"}}
{"ts":"2025-05-30T01:53:48.515Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:53:48.514Z","windowFocusDurationMs":11262}}
{"ts":"2025-05-30T01:54:17.787Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:54:17.787Z"}}
{"ts":"2025-05-30T01:54:44.946Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:54:44.946Z","windowFocusDurationMs":27159}}
{"ts":"2025-05-30T01:55:01.029Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:55:01.029Z"}}
{"ts":"2025-05-30T01:55:04.034Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:55:04.034Z","windowFocusDurationMs":3005}}
{"ts":"2025-05-30T01:55:05.573Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:55:05.573Z"}}
{"ts":"2025-05-30T01:55:20.915Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:55:20.915Z","windowFocusDurationMs":15342}}
{"ts":"2025-05-30T01:55:45.851Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:55:45.851Z"}}
{"ts":"2025-05-30T01:55:57.732Z","type":"file-save-diff","payload":{"uri":"vscode-userdata:/c%3A/Users/ds3/AppData/Roaming/Code/User/profiles/12bec45b/settings.json","savedAt":"2025-05-30T01:55:57.732Z","diff":[{"count":5,"added":true,"removed":false,"value":"{\r\n    \"terminal.integrated.defaultProfile.windows\": \"Git Bash\",\r\n    \"editor.formatOnSave\": true,\r\n    \"editor.formatOnType\": true\r\n}"}]}}
{"ts":"2025-05-30T01:55:57.733Z","type":"file-save","payload":{"uri":"vscode-userdata:/c%3A/Users/ds3/AppData/Roaming/Code/User/profiles/12bec45b/settings.json","savedAt":"2025-05-30T01:55:57.732Z"}}
{"ts":"2025-05-30T01:55:57.933Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:55:57.933Z","windowFocusDurationMs":12082}}
{"ts":"2025-05-30T01:56:00.129Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:56:00.129Z"}}
{"ts":"2025-05-30T01:56:01.373Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T01:56:01.373Z","windowFocusDurationMs":1244}}
{"ts":"2025-05-30T01:56:03.173Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:56:03.172Z"}}
{"ts":"2025-05-30T01:56:09.356Z","type":"file-save-diff","payload":{"uri":"vscode-userdata:/c%3A/Users/ds3/AppData/Roaming/Code/User/profiles/12bec45b/settings.json","savedAt":"2025-05-30T01:56:09.356Z","diff":[{"count":6,"added":true,"removed":false,"value":"{\r\n    \"terminal.integrated.defaultProfile.windows\": \"Git Bash\",\r\n    \"editor.formatOnSave\": true,\r\n    \"editor.formatOnType\": true,\r\n    \"editor.formatOnPaste\": true\r\n}"}]}}
{"ts":"2025-05-30T01:56:09.357Z","type":"file-save","payload":{"uri":"vscode-userdata:/c%3A/Users/ds3/AppData/Roaming/Code/User/profiles/12bec45b/settings.json","savedAt":"2025-05-30T01:56:09.356Z"}}
{"ts":"2025-05-30T01:56:11.602Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","focusedAt":"2025-05-30T01:56:11.602Z"}}
{"ts":"2025-05-30T01:56:14.616Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:14.613Z"}}
{"ts":"2025-05-30T01:56:14.615Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:14.613Z","diff":[{"count":1,"added":false,"removed":true,"value":"trips <- read_csv('201402-citibike-tripdata.csv')\r\n"},{"count":1,"added":true,"removed":false,"value":"trips <- read_csv(\"201402-citibike-tripdata.csv\")\r\n"},{"count":1,"added":false,"removed":true,"value":"names(trips) <- gsub(' ', '_', names(trips))\r\n"},{"count":1,"added":true,"removed":false,"value":"names(trips) <- gsub(\" \", \"_\", names(trips))\r\n"},{"count":1,"added":false,"removed":true,"value":"trips <- mutate(trips, gender = factor(gender, levels=c(0,1,2), labels = c(\"Unknown\",\"Male\",\"Female\")))\r\n"},{"count":1,"added":true,"removed":false,"value":"trips <- mutate(trips, gender = factor(gender, levels = c(0, 1, 2), labels = c(\"Unknown\", \"Male\", \"Female\")))\r\n"},{"count":1,"added":false,"removed":true,"value":"trips |> summarize(min_birth_year = min(as.numeric(birth_year), na.rm=T))\r\n"},{"count":1,"added":true,"removed":false,"value":"trips |> summarize(min_birth_year = min(as.numeric(birth_year), na.rm = T))\r\n"},{"count":1,"added":false,"removed":true,"value":"trips_or_broadway <- trips |> filter(grepl('Broadway', start_station_name) | grepl('Broadway', end_station_name))\r\n"},{"count":1,"added":true,"removed":false,"value":"trips_or_broadway <- trips |> filter(grepl(\"Broadway\", start_station_name) | grepl(\"Broadway\", end_station_name))\r\n"},{"count":1,"added":false,"removed":true,"value":"trips_and_broadway <- trips |> filter(grepl('Broadway', start_station_name), grepl('Broadway', end_station_name)) |> view()\r\n"},{"count":3,"added":true,"removed":false,"value":"trips_and_broadway <- trips |>\r\n    filter(grepl(\"Broadway\", start_station_name), grepl(\"Broadway\", end_station_name)) |>\r\n    view()\r\n"},{"count":3,"added":false,"removed":true,"value":"     summarize(num_trips = n(),\r\n            mean_trip_length = mean(tripduration, na.rm=TRUE)/60,\r\n            sd_trip_length = sd(tripduration, na.rm=TRUE)/60)\r\n"},{"count":5,"added":true,"removed":false,"value":"    summarize(\r\n        num_trips = n(),\r\n        mean_trip_length = mean(tripduration, na.rm = TRUE) / 60,\r\n        sd_trip_length = sd(tripduration, na.rm = TRUE) / 60\r\n    )\r\n"},{"count":1,"added":false,"removed":true,"value":"trips |> group_by(start_station_name, end_station_name) |> summarize(count = n()) |> arrange(desc(count)) |> head(10)\r\n"},{"count":5,"added":true,"removed":false,"value":"trips |>\r\n    group_by(start_station_name, end_station_name) |>\r\n    summarize(count = n()) |>\r\n    arrange(desc(count)) |>\r\n    head(10)\r\n"},{"count":1,"added":false,"removed":true,"value":"trips |> count(start_station_name, end_station_name) |> group_by(start_station_name) |> arrange(desc(n)) |> slice(1:3)\r\n"},{"count":5,"added":true,"removed":false,"value":"trips |>\r\n    count(start_station_name, end_station_name) |>\r\n    group_by(start_station_name) |>\r\n    arrange(desc(n)) |>\r\n    slice(1:3)\r\n"},{"count":1,"added":false,"removed":true,"value":"trips |> count(gender, start_station_name, end_station_name) |> group_by(gender) |> arrange(desc(n)) |> slice(1:3)\r\n"},{"count":5,"added":true,"removed":false,"value":"trips |>\r\n    count(gender, start_station_name, end_station_name) |>\r\n    group_by(gender) |>\r\n    arrange(desc(n)) |>\r\n    slice(1:3)\r\n"},{"count":2,"added":false,"removed":true,"value":"trips |> select(starttime, stoptime) |> mutate(startday=floor_date(starttime, unit = \"day\"),\r\n                                                 endday=floor_date(stoptime, unit = \"day\"))\r\n"},{"count":6,"added":true,"removed":false,"value":"trips |>\r\n    select(starttime, stoptime) |>\r\n    mutate(\r\n        startday = floor_date(starttime, unit = \"day\"),\r\n        endday = floor_date(stoptime, unit = \"day\")\r\n    )\r\n"},{"count":1,"added":false,"removed":true,"value":"trips |> mutate(hour = hour(starttime), month = month(starttime)) |> count(hour, month) |> group_by(hour) |> summarize(avg_trips = mean(n)/days_in_month(month)) |> arrange(desc(avg_trips))\r\n"},{"count":6,"added":true,"removed":false,"value":"trips |>\r\n    mutate(hour = hour(starttime), month = month(starttime)) |>\r\n    count(hour, month) |>\r\n    group_by(hour) |>\r\n    summarize(avg_trips = mean(n) / days_in_month(month)) |>\r\n    arrange(desc(avg_trips))\r\n"}]}}
{"ts":"2025-05-30T01:56:16.399Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:16.399Z","diff":[]}}
{"ts":"2025-05-30T01:56:16.401Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:16.399Z"}}
{"ts":"2025-05-30T01:56:20.198Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:20.197Z","diff":[]}}
{"ts":"2025-05-30T01:56:20.199Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:20.197Z"}}
{"ts":"2025-05-30T01:56:23.666Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:23.665Z","diff":[]}}
{"ts":"2025-05-30T01:56:23.666Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:23.665Z"}}
{"ts":"2025-05-30T01:56:32.526Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:32.526Z","diff":[]}}
{"ts":"2025-05-30T01:56:32.527Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:32.526Z"}}
{"ts":"2025-05-30T01:56:33.323Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:33.323Z","diff":[]}}
{"ts":"2025-05-30T01:56:33.324Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:33.323Z"}}
{"ts":"2025-05-30T01:56:33.402Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:33.402Z","diff":[]}}
{"ts":"2025-05-30T01:56:33.403Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:33.402Z"}}
{"ts":"2025-05-30T01:56:34.194Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:34.194Z","diff":[]}}
{"ts":"2025-05-30T01:56:34.195Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:56:34.194Z"}}
{"ts":"2025-05-30T01:57:06.913Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:57:06.913Z","diff":[]}}
{"ts":"2025-05-30T01:57:06.916Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:57:06.913Z"}}
{"ts":"2025-05-30T01:57:08.062Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:57:08.062Z","diff":[]}}
{"ts":"2025-05-30T01:57:08.063Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T01:57:08.062Z"}}
{"ts":"2025-05-30T01:57:50.019Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:57:50.019Z","focusDurationMs":98417,"windowFocusDurationMs":106847}}
{"ts":"2025-05-30T01:58:20.750Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:58:20.750Z"}}
{"ts":"2025-05-30T01:58:51.157Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:58:51.157Z","focusDurationMs":30407,"windowFocusDurationMs":30407}}
{"ts":"2025-05-30T01:59:17.752Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:59:17.752Z"}}
{"ts":"2025-05-30T01:59:25.404Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:59:25.404Z","focusDurationMs":7652,"windowFocusDurationMs":7652}}
{"ts":"2025-05-30T01:59:26.978Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:59:26.978Z"}}
{"ts":"2025-05-30T01:59:29.169Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:59:29.169Z","focusDurationMs":2191,"windowFocusDurationMs":2191}}
{"ts":"2025-05-30T01:59:50.648Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T01:59:50.648Z"}}
{"ts":"2025-05-30T01:59:51.114Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T01:59:51.114Z","focusDurationMs":466,"windowFocusDurationMs":466}}
{"ts":"2025-05-30T02:00:38.567Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T02:00:38.567Z"}}
{"ts":"2025-05-30T02:00:49.363Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T02:00:49.363Z","focusDurationMs":10796,"windowFocusDurationMs":10796}}
{"ts":"2025-05-30T02:00:52.898Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T02:00:52.898Z"}}
{"ts":"2025-05-30T02:01:18.414Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T02:01:18.414Z","focusDurationMs":25516,"windowFocusDurationMs":25516}}
{"ts":"2025-05-30T02:01:23.263Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T02:01:23.263Z"}}
{"ts":"2025-05-30T02:01:38.467Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T02:01:38.467Z","focusDurationMs":15204}}
{"ts":"2025-05-30T02:01:38.481Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","focusedAt":"2025-05-30T02:01:38.481Z"}}
{"ts":"2025-05-30T02:01:38.705Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","blurredAt":"2025-05-30T02:01:38.705Z","focusDurationMs":224}}
{"ts":"2025-05-30T02:01:38.721Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","focusedAt":"2025-05-30T02:01:38.721Z"}}
{"ts":"2025-05-30T02:01:39.357Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T02:01:39.357Z","focusDurationMs":636}}
{"ts":"2025-05-30T02:01:39.376Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","focusedAt":"2025-05-30T02:01:39.376Z"}}
{"ts":"2025-05-30T02:01:39.814Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","blurredAt":"2025-05-30T02:01:39.814Z","focusDurationMs":438}}
{"ts":"2025-05-30T02:01:39.829Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","focusedAt":"2025-05-30T02:01:39.829Z"}}
{"ts":"2025-05-30T02:01:40.138Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T02:01:40.138Z","focusDurationMs":309}}
{"ts":"2025-05-30T02:01:40.152Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","focusedAt":"2025-05-30T02:01:40.152Z"}}
{"ts":"2025-05-30T02:01:40.353Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","blurredAt":"2025-05-30T02:01:40.353Z","focusDurationMs":201}}
{"ts":"2025-05-30T02:01:40.538Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","focusedAt":"2025-05-30T02:01:40.538Z"}}
{"ts":"2025-05-30T02:01:40.718Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T02:01:40.718Z","focusDurationMs":180}}
{"ts":"2025-05-30T02:01:40.731Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","focusedAt":"2025-05-30T02:01:40.731Z"}}
{"ts":"2025-05-30T02:01:40.967Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","blurredAt":"2025-05-30T02:01:40.967Z","focusDurationMs":236}}
{"ts":"2025-05-30T02:01:40.981Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","focusedAt":"2025-05-30T02:01:40.981Z"}}
{"ts":"2025-05-30T02:01:41.710Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T02:01:41.710Z","focusDurationMs":729}}
{"ts":"2025-05-30T02:01:48.753Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","focusedAt":"2025-05-30T02:01:48.753Z"}}
{"ts":"2025-05-30T02:02:13.010Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T02:02:13.010Z","focusDurationMs":24257}}
{"ts":"2025-05-30T02:02:14.126Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","focusedAt":"2025-05-30T02:02:14.126Z"}}
{"ts":"2025-05-30T02:02:15.222Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T02:02:15.222Z","focusDurationMs":1096}}
{"ts":"2025-05-30T02:02:15.239Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","focusedAt":"2025-05-30T02:02:15.239Z"}}
{"ts":"2025-05-30T02:02:16.749Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","blurredAt":"2025-05-30T02:02:16.749Z","focusDurationMs":1510,"windowFocusDurationMs":53486}}
{"ts":"2025-05-30T02:02:17.976Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T02:02:17.976Z"}}
{"ts":"2025-05-30T02:02:19.077Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","blurredAt":"2025-05-30T02:02:19.076Z","focusDurationMs":1100,"windowFocusDurationMs":1100}}
{"ts":"2025-05-30T02:03:04.743Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T02:03:04.743Z"}}
{"ts":"2025-05-30T02:03:17.975Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","blurredAt":"2025-05-30T02:03:17.975Z","focusDurationMs":13232,"windowFocusDurationMs":13232}}
{"ts":"2025-05-30T02:04:10.560Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T02:04:10.560Z"}}
{"ts":"2025-05-30T02:04:12.134Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","blurredAt":"2025-05-30T02:04:12.134Z","focusDurationMs":1574}}
{"ts":"2025-05-30T02:04:12.777Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T02:04:12.777Z","windowFocusDurationMs":2217}}
{"ts":"2025-05-30T02:04:41.543Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T02:04:41.543Z"}}
{"ts":"2025-05-30T02:04:55.297Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T02:04:55.296Z","windowFocusDurationMs":13753}}
{"ts":"2025-05-30T02:05:02.304Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T02:05:02.304Z"}}
{"ts":"2025-05-30T02:05:02.748Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T02:05:02.748Z","windowFocusDurationMs":444}}
{"ts":"2025-05-30T02:05:05.182Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T02:05:05.182Z"}}
{"ts":"2025-05-30T02:05:21.621Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T02:05:21.621Z","windowFocusDurationMs":16439}}
{"ts":"2025-05-30T02:05:23.867Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T02:05:23.867Z"}}
{"ts":"2025-05-30T02:06:20.296Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T02:06:20.296Z","windowFocusDurationMs":56429}}
{"ts":"2025-05-30T02:07:21.272Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T02:07:21.272Z"}}
{"ts":"2025-05-30T02:07:32.704Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T02:07:32.704Z"}}
{"ts":"2025-05-30T02:07:35.218Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T02:07:35.218Z"}}
{"ts":"2025-05-30T02:07:35.698Z","type":"file-save-diff","payload":{"uri":"vscode-userdata:/c%3A/Users/ds3/AppData/Roaming/Code/User/profiles/12bec45b/settings.json","savedAt":"2025-05-30T02:07:35.698Z","diff":[{"count":7,"added":true,"removed":false,"value":"{\r\n    \"terminal.integrated.defaultProfile.windows\": \"Git Bash\",\r\n    \"editor.formatOnSave\": true,\r\n    \"editor.formatOnType\": true,\r\n    \"editor.formatOnPaste\": true,\r\n    \"r.lsp.diagnostics\": false\r\n}"}]}}
{"ts":"2025-05-30T02:07:35.700Z","type":"file-save","payload":{"uri":"vscode-userdata:/c%3A/Users/ds3/AppData/Roaming/Code/User/profiles/12bec45b/settings.json","savedAt":"2025-05-30T02:07:35.698Z"}}
{"ts":"2025-05-30T02:07:42.278Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","focusedAt":"2025-05-30T02:07:42.278Z"}}
{"ts":"2025-05-30T02:07:45.340Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T02:07:45.340Z","diff":[]}}
{"ts":"2025-05-30T02:07:45.341Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","savedAt":"2025-05-30T02:07:45.340Z"}}
{"ts":"2025-05-30T02:07:48.697Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","openedAt":1748556318604,"focusDurationMs":6419,"focusedMs":17240761}}
{"ts":"2025-05-30T02:07:49.868Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","initialContent":"library(tidyverse)\r\nlibrary(lubridate)\r\n\r\n########################################\r\n# READ AND TRANSFORM THE DATA\r\n########################################\r\n\r\n# read one month of data\r\ntrips <- read_csv(\"201402-citibike-tripdata.csv\")\r\n\r\n# replace spaces in column names with underscores\r\nnames(trips) <- gsub(\" \", \"_\", names(trips))\r\n\r\n# convert dates strings to dates\r\n# trips <- mutate(trips, starttime = mdy_hms(starttime), stoptime = mdy_hms(stoptime))\r\n\r\n# recode gender as a factor 0->\"Unknown\", 1->\"Male\", 2->\"Female\"\r\ntrips <- mutate(trips, gender = factor(gender, levels = c(0, 1, 2), labels = c(\"Unknown\", \"Male\", \"Female\")))\r\n\r\n########################################\r\n# YOUR SOLUTIONS BELOW\r\n########################################\r\n\r\n# count the number of trips (= rows in the data frame)\r\ntrips |> summarize(count = n())\r\n\r\n# find the earliest and latest birth years (see help for max and min to deal with NAs)\r\ntrips |> summarize(min_birth_year = min(as.numeric(birth_year), na.rm = T))\r\n\r\n# use filter and grepl to find all trips that either start or end on broadway\r\ntrips_or_broadway <- trips |> filter(grepl(\"Broadway\", start_station_name) | grepl(\"Broadway\", end_station_name))\r\n\r\n# do the same, but find all trips that both start and end on broadway\r\ntrips_and_broadway <- trips |>\r\n    filter(grepl(\"Broadway\", start_station_name), grepl(\"Broadway\", end_station_name)) |>\r\n    view()\r\n\r\n# find all unique station names\r\nstations_unique <- unique(c(select(trips, start_station_name), select(trips, end_station_name)))\r\n\r\n# count the number of trips by gender, the average trip time by gender, and the standard deviation in trip time by gender\r\n# do this all at once, by using summarize() with multiple arguments\r\n\r\ntrips |>\r\n    group_by(gender) |>\r\n    summarize(\r\n        num_trips = n(),\r\n        mean_trip_length = mean(tripduration, na.rm = TRUE) / 60,\r\n        sd_trip_length = sd(tripduration, na.rm = TRUE) / 60\r\n    )\r\n\r\n# find the 10 most frequent station-to-station trips\r\ntrips |>\r\n    group_by(start_station_name, end_station_name) |>\r\n    summarize(count = n()) |>\r\n    arrange(desc(count)) |>\r\n    head(10)\r\n\r\n\r\n# find the top 3 end stations for trips starting from each start station\r\ntrips |>\r\n    count(start_station_name, end_station_name) |>\r\n    group_by(start_station_name) |>\r\n    arrange(desc(n)) |>\r\n    slice(1:3)\r\n\r\n\r\n# find the top 3 most common station-to-station trips by gender\r\ntrips |>\r\n    count(gender, start_station_name, end_station_name) |>\r\n    group_by(gender) |>\r\n    arrange(desc(n)) |>\r\n    slice(1:3)\r\n\r\n\r\n# find the day with the most trips\r\n# tip: first add a column for year/month/day without time of day (use as.Date or floor_date from the lubridate package)\r\ntrips |>\r\n    select(starttime, stoptime) |>\r\n    mutate(\r\n        startday = floor_date(starttime, unit = \"day\"),\r\n        endday = floor_date(stoptime, unit = \"day\")\r\n    )\r\n\r\n\r\n# compute the average number of trips taken during each of the 24 hours of the day across the entire month\r\n# what time(s) of day tend to be peak hour(s)?\r\ntrips |>\r\n    mutate(hour = hour(starttime), month = month(starttime)) |>\r\n    count(hour, month) |>\r\n    group_by(hour) |>\r\n    summarize(avg_trips = mean(n) / days_in_month(month)) |>\r\n    arrange(desc(avg_trips))\r\n"}}
{"ts":"2025-05-30T02:07:49.912Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","focusedAt":"2025-05-30T02:07:49.912Z"}}
{"ts":"2025-05-30T02:07:55.477Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","openedAt":1748567288797,"focusDurationMs":0,"focusedMs":387195}}
{"ts":"2025-05-30T02:07:55.478Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","openedAt":1748570869868,"focusDurationMs":5565,"focusedMs":5565}}
{"ts":"2025-05-30T02:08:01.422Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","initialContent":"library(tidyverse)\r\nlibrary(lubridate)\r\n\r\n########################################\r\n# READ AND TRANSFORM THE DATA\r\n########################################\r\n\r\n# read one month of data\r\ntrips <- read_csv(\"201402-citibike-tripdata.csv\")\r\n\r\n# replace spaces in column names with underscores\r\nnames(trips) <- gsub(\" \", \"_\", names(trips))\r\n\r\n# convert dates strings to dates\r\n# trips <- mutate(trips, starttime = mdy_hms(starttime), stoptime = mdy_hms(stoptime))\r\n\r\n# recode gender as a factor 0->\"Unknown\", 1->\"Male\", 2->\"Female\"\r\ntrips <- mutate(trips, gender = factor(gender, levels = c(0, 1, 2), labels = c(\"Unknown\", \"Male\", \"Female\")))\r\n\r\n########################################\r\n# YOUR SOLUTIONS BELOW\r\n########################################\r\n\r\n# count the number of trips (= rows in the data frame)\r\ntrips |> summarize(count = n())\r\n\r\n# find the earliest and latest birth years (see help for max and min to deal with NAs)\r\ntrips |> summarize(min_birth_year = min(as.numeric(birth_year), na.rm = T))\r\n\r\n# use filter and grepl to find all trips that either start or end on broadway\r\ntrips_or_broadway <- trips |> filter(grepl(\"Broadway\", start_station_name) | grepl(\"Broadway\", end_station_name))\r\n\r\n# do the same, but find all trips that both start and end on broadway\r\ntrips_and_broadway <- trips |>\r\n    filter(grepl(\"Broadway\", start_station_name), grepl(\"Broadway\", end_station_name)) |>\r\n    view()\r\n\r\n# find all unique station names\r\nstations_unique <- unique(c(select(trips, start_station_name), select(trips, end_station_name)))\r\n\r\n# count the number of trips by gender, the average trip time by gender, and the standard deviation in trip time by gender\r\n# do this all at once, by using summarize() with multiple arguments\r\n\r\ntrips |>\r\n    group_by(gender) |>\r\n    summarize(\r\n        num_trips = n(),\r\n        mean_trip_length = mean(tripduration, na.rm = TRUE) / 60,\r\n        sd_trip_length = sd(tripduration, na.rm = TRUE) / 60\r\n    )\r\n\r\n# find the 10 most frequent station-to-station trips\r\ntrips |>\r\n    group_by(start_station_name, end_station_name) |>\r\n    summarize(count = n()) |>\r\n    arrange(desc(count)) |>\r\n    head(10)\r\n\r\n\r\n# find the top 3 end stations for trips starting from each start station\r\ntrips |>\r\n    count(start_station_name, end_station_name) |>\r\n    group_by(start_station_name) |>\r\n    arrange(desc(n)) |>\r\n    slice(1:3)\r\n\r\n\r\n# find the top 3 most common station-to-station trips by gender\r\ntrips |>\r\n    count(gender, start_station_name, end_station_name) |>\r\n    group_by(gender) |>\r\n    arrange(desc(n)) |>\r\n    slice(1:3)\r\n\r\n\r\n# find the day with the most trips\r\n# tip: first add a column for year/month/day without time of day (use as.Date or floor_date from the lubridate package)\r\ntrips |>\r\n    select(starttime, stoptime) |>\r\n    mutate(\r\n        startday = floor_date(starttime, unit = \"day\"),\r\n        endday = floor_date(stoptime, unit = \"day\")\r\n    )\r\n\r\n\r\n# compute the average number of trips taken during each of the 24 hours of the day across the entire month\r\n# what time(s) of day tend to be peak hour(s)?\r\ntrips |>\r\n    mutate(hour = hour(starttime), month = month(starttime)) |>\r\n    count(hour, month) |>\r\n    group_by(hour) |>\r\n    summarize(avg_trips = mean(n) / days_in_month(month)) |>\r\n    arrange(desc(avg_trips))\r\n"}}
{"ts":"2025-05-30T02:08:01.430Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","initialContent":"#!/bin/bash\n#\n\n# get date\n# parse date in a way where it is just numbers\n# don't select same team member (need to figure out combinations)\n#\n\n\ncd students\n\nname=($(ls | cut -d' ' -f1 | awk -F. '{print $1}'))\n\nday=$(date +%d)\n\ncombination=$((day % 11))\n\nif (( $combination > 6 )); then\n    iterations=$((combination - 6))\n    for ((i=0; i < iterations; i++)); do\n        reserve=${name[1]}\n        for ((j=1; j<12; j+=2)); do\n            if (( j+2 < 12 )); then\n                name[j]=${name[$((j+2))]}\n            else\n                name[j]=${name[$(((j+2) % 12))]}\n            fi\n        done\n        name[11]=$reserve\n    done\nelse\n    for ((i=0; i < combination; i++)); do\n        temp=${name[1]}\n        for ((j=2; j<12; j+=2)); do\n            if (( j == 2)); then\n                name[j-1]=${name[j]}\n            else\n                name[j-2]=${name[j]}\n            fi\n        done\n        name[10]=$temp\n    done\nfi\n\nfor ((i=0; i < 12; i++)); do\n    if (( i % 2 == 0)); then\n        echo \"--------------\"\n    fi\n    echo ${name[i]}\ndone\n\n\n"}}
{"ts":"2025-05-30T02:08:01.433Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","focusedAt":"2025-05-30T02:08:01.433Z"}}
{"ts":"2025-05-30T02:08:09.845Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T02:08:09.845Z","focusDurationMs":8412}}
{"ts":"2025-05-30T02:08:11.104Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T02:08:11.104Z","focusDurationMs":9671}}
{"ts":"2025-05-30T02:08:11.210Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T02:08:11.210Z"}}
{"ts":"2025-05-30T02:08:17.546Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T02:08:17.546Z","windowFocusDurationMs":6336}}
{"ts":"2025-05-30T02:08:40.129Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T02:08:40.129Z"}}
{"ts":"2025-05-30T02:08:41.128Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","focusedAt":"2025-05-30T02:08:41.128Z"}}
{"ts":"2025-05-30T02:08:50.877Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","openedAt":1748570881422,"focusDurationMs":9749,"focusedMs":27832}}
{"ts":"2025-05-30T02:08:50.877Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","openedAt":1748570881430,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:20:05.089Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","initialContent":"library(tidyverse)\r\nlibrary(lubridate)\r\n\r\n########################################\r\n# READ AND TRANSFORM THE DATA\r\n########################################\r\n\r\n# read one month of data\r\ntrips <- read_csv(\"201402-citibike-tripdata.csv\")\r\n\r\n# replace spaces in column names with underscores\r\nnames(trips) <- gsub(\" \", \"_\", names(trips))\r\n\r\n# convert dates strings to dates\r\n# trips <- mutate(trips, starttime = mdy_hms(starttime), stoptime = mdy_hms(stoptime))\r\n\r\n# recode gender as a factor 0->\"Unknown\", 1->\"Male\", 2->\"Female\"\r\ntrips <- mutate(trips, gender = factor(gender, levels = c(0, 1, 2), labels = c(\"Unknown\", \"Male\", \"Female\")))\r\n\r\n########################################\r\n# YOUR SOLUTIONS BELOW\r\n########################################\r\n\r\n# count the number of trips (= rows in the data frame)\r\ntrips |> summarize(count = n())\r\n\r\n# find the earliest and latest birth years (see help for max and min to deal with NAs)\r\ntrips |> summarize(min_birth_year = min(as.numeric(birth_year), na.rm = T))\r\n\r\n# use filter and grepl to find all trips that either start or end on broadway\r\ntrips_or_broadway <- trips |> filter(grepl(\"Broadway\", start_station_name) | grepl(\"Broadway\", end_station_name))\r\n\r\n# do the same, but find all trips that both start and end on broadway\r\ntrips_and_broadway <- trips |>\r\n    filter(grepl(\"Broadway\", start_station_name), grepl(\"Broadway\", end_station_name)) |>\r\n    view()\r\n\r\n# find all unique station names\r\nstations_unique <- unique(c(select(trips, start_station_name), select(trips, end_station_name)))\r\n\r\n# count the number of trips by gender, the average trip time by gender, and the standard deviation in trip time by gender\r\n# do this all at once, by using summarize() with multiple arguments\r\n\r\ntrips |>\r\n    group_by(gender) |>\r\n    summarize(\r\n        num_trips = n(),\r\n        mean_trip_length = mean(tripduration, na.rm = TRUE) / 60,\r\n        sd_trip_length = sd(tripduration, na.rm = TRUE) / 60\r\n    )\r\n\r\n# find the 10 most frequent station-to-station trips\r\ntrips |>\r\n    group_by(start_station_name, end_station_name) |>\r\n    summarize(count = n()) |>\r\n    arrange(desc(count)) |>\r\n    head(10)\r\n\r\n\r\n# find the top 3 end stations for trips starting from each start station\r\ntrips |>\r\n    count(start_station_name, end_station_name) |>\r\n    group_by(start_station_name) |>\r\n    arrange(desc(n)) |>\r\n    slice(1:3)\r\n\r\n\r\n# find the top 3 most common station-to-station trips by gender\r\ntrips |>\r\n    count(gender, start_station_name, end_station_name) |>\r\n    group_by(gender) |>\r\n    arrange(desc(n)) |>\r\n    slice(1:3)\r\n\r\n\r\n# find the day with the most trips\r\n# tip: first add a column for year/month/day without time of day (use as.Date or floor_date from the lubridate package)\r\ntrips |>\r\n    select(starttime, stoptime) |>\r\n    mutate(\r\n        startday = floor_date(starttime, unit = \"day\"),\r\n        endday = floor_date(stoptime, unit = \"day\")\r\n    )\r\n\r\n\r\n# compute the average number of trips taken during each of the 24 hours of the day across the entire month\r\n# what time(s) of day tend to be peak hour(s)?\r\ntrips |>\r\n    mutate(hour = hour(starttime), month = month(starttime)) |>\r\n    count(hour, month) |>\r\n    group_by(hour) |>\r\n    summarize(avg_trips = mean(n) / days_in_month(month)) |>\r\n    arrange(desc(avg_trips))\r\n"}}
{"ts":"2025-05-30T14:20:05.092Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","initialContent":"#!/bin/bash\n#\n\n# get date\n# parse date in a way where it is just numbers\n# don't select same team member (need to figure out combinations)\n#\n\n\ncd students\n\nname=($(ls | cut -d' ' -f1 | awk -F. '{print $1}'))\n\nday=$(date +%d)\n\ncombination=$((day % 11))\n\nif (( $combination > 6 )); then\n    iterations=$((combination - 6))\n    for ((i=0; i < iterations; i++)); do\n        reserve=${name[1]}\n        for ((j=1; j<12; j+=2)); do\n            if (( j+2 < 12 )); then\n                name[j]=${name[$((j+2))]}\n            else\n                name[j]=${name[$(((j+2) % 12))]}\n            fi\n        done\n        name[11]=$reserve\n    done\nelse\n    for ((i=0; i < combination; i++)); do\n        temp=${name[1]}\n        for ((j=2; j<12; j+=2)); do\n            if (( j == 2)); then\n                name[j-1]=${name[j]}\n            else\n                name[j-2]=${name[j]}\n            fi\n        done\n        name[10]=$temp\n    done\nfi\n\nfor ((i=0; i < 12; i++)); do\n    if (( i % 2 == 0)); then\n        echo \"--------------\"\n    fi\n    echo ${name[i]}\ndone\n\n\n"}}
{"ts":"2025-05-30T14:20:05.093Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","focusedAt":"2025-05-30T14:20:05.093Z"}}
{"ts":"2025-05-30T14:20:22.090Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/.git/MERGE_MSG","initialContent":"Merge branch 'master' of https://github.com/msr-ds3/coursework\n# Please enter a commit message to explain why this merge is necessary,\n# especially if it merges an updated upstream into a topic branch.\n#\n# Lines starting with '#' will be ignored, and an empty message aborts\n# the commit.\n"}}
{"ts":"2025-05-30T14:20:22.100Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T14:20:22.100Z","focusDurationMs":17007}}
{"ts":"2025-05-30T14:20:22.123Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/.git/MERGE_MSG","focusedAt":"2025-05-30T14:20:22.123Z"}}
{"ts":"2025-05-30T14:20:47.825Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/.git/MERGE_MSG","savedAt":"2025-05-30T14:20:47.824Z","diff":[]}}
{"ts":"2025-05-30T14:20:47.828Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/.git/MERGE_MSG","savedAt":"2025-05-30T14:20:47.824Z"}}
{"ts":"2025-05-30T14:20:53.227Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/.git/MERGE_MSG","openedAt":1748614822090,"focusDurationMs":31104,"focusedMs":31104}}
{"ts":"2025-05-30T14:20:53.257Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","focusedAt":"2025-05-30T14:20:53.257Z"}}
{"ts":"2025-05-30T14:21:21.080Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/README.md","initialContent":"This week covers:\r\n\r\n  * An intro to Git and Github for sharing code\r\n  * Command line tools\r\n  * R and the Tidyverse\r\n\r\n# Day 1\r\n\r\n## Setup\r\n\r\nInstall tools: Visual Studio Code, Git for Windows, R\r\n\r\n\r\n### Visual Studio Code\r\n  * Install [Visual Studio Code](https://code.visualstudio.com) which will be your main text editor\r\n  * Install the [GitHub Copilot](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot) and [GitHub Copilot Chat](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot-chat) extensions for Visual Studio Code\r\n\r\n### Git for Windows\r\n  * Install [Git for Windows](https://github.com/git-guides/install-git#install-git-on-windows) using the \"Git for Windows installer\"\r\n  * Open Git Bash and check that you have git under bash by typing `git --version` in the terminal\r\n<!--  * Configure git to deal with line endings in a cross-platform friendly way: `git config --global core.autocrlf true` -->\r\n  * Do the same within Visual Studio Code\r\n\r\n### R\r\n  \r\n  * Download and install R from a [CRAN mirror](https://cloud.r-project.org/)\r\n<!--\r\n  * Download and install [RStudio](https://www.rstudio.com/products/rstudio/download/)\r\n  * Open RStudio and install the `tidyverse` package, which includes  `dplyr`, `ggplot2`, and more: `install.packages('tidyverse', dependencies = T)`\r\n-->\r\n\r\n### Filesystem setup\r\n  * Verify that you can see the same set of files through Git Bash and your Windows Explorer by opening Git Bash and typing `ls` and `pwd` to see the contents of your current directory and its location\r\n  * Navigate to Windows Explorer and see if you can find the same directory and check its contents\r\n\r\n\r\n## Intro to Git(Hub)\r\n\r\n### Make your first commit and pull request\r\n  * [Sign up](https://github.com/join) for a free GitHub account\r\n  * Then follow this guide to [fork your own copy](https://guides.github.com/activities/forking/) of the course repository\r\n  * [Clone a copy of your forked repository](https://help.github.com/articles/cloning-a-repository/), which should be located at ``https://github.com/<yourusername>/coursework.git``, to your local machine\r\n  * Once that's done, create a new file in the ``week1/students`` directory, ``<yourfirstname>.txt`` (e.g., ``jake.txt``)\r\n  * Use ``git add`` to add the file to your local repository\r\n  * If needed, set your [git username and email](https://docs.github.com/en/get-started/git-basics/setting-your-username-in-git#setting-your-git-username-for-every-repository-on-your-computer) with ``git config --global user.name \"Your Name\"`` and ``git config --global user.email \"you@youremail.com\"``\r\n  * Set your [default git editor to VSCode](https://docs.github.com/en/get-started/git-basics/associating-text-editors-with-git#using-visual-studio-code-as-your-editor) using ``git config --global core.editor \"code --wait\"``\r\n  * Use ``git commit`` and ``git push`` to commit and push your changes to your copy of the repository\r\n  * Then issue a [pull request](https://guides.github.com/activities/forking/#making-a-pull-request) to send the changes back to the original course repository\r\n  * Finally, [sync changes from the main repo](https://help.github.com/articles/syncing-a-fork/) to your fork with ``git pull upstream master`` (if your machine doesn't recognize `upstream`, do the following to create the `upstream` shortcut: `git remote add upstream https://github.com/msr-ds3/coursework.git`)\r\n\r\n### Learn more (optional)\r\n  * Codecademy's [interactive introduction to git](https://www.codecademy.com/learn/learn-git)\r\n  * A full hour-long [introductory video](https://www.youtube.com/watch?v=U8GBXvdmHT4)\r\n  * More resources from GitHub available [here](https://services.github.com/resources/) and [here](https://help.github.com/articles/good-resources-for-learning-git-and-github/)\r\n  * And here's a handy [cheatsheet](https://services.github.com/on-demand/downloads/github-git-cheat-sheet/)\r\n\r\n## Extra\r\n\r\nThink about how to write a `musical_pairs.sh` script to determine your programming partner each day. We want the script to do the following:\r\n\r\n* Produce a (pseudo)random pairing of 6 groups of 2 people who get to work together each day on pair programming assignments\r\n* Any one of us should be able to run the script and get the same pairing on a given day (i.e., as long as our computers agree on the year/month/day)\r\n* It's interesting to think about how we might avoid repeated pairs from one day to the next, but for a first cut (and maybe final cut) version of the script you can ignore that issue\r\n\r\n\r\n\r\n\r\n# Day 2\r\n  \r\n## Intro to the Command Line\r\n  * See this [intro to the command line](intro_command_line.ipynb) notebook \r\n  * Read through [Lifehacker's command line primer](http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything)\r\n  * See [Linux Journey's shell lesson](https://linuxjourney.com/lesson/the-shell)\r\n\r\n### Learn more (optional)\r\n  * See this [crash course](https://learnpythonthehardway.org/book/appendixa.html) for more details on commonly used commands\r\n  * Check out Software Carpentry's [guide to the Unix shell](http://swcarpentry.github.io/shell-novice/)\r\n  * Review this wikibook on [data analysis on the command line](http://en.wikibooks.org/wiki/Ad_Hoc_Data_Analysis_From_The_Unix_Command_Line), covering ``cut``, ``grep``, ``wc``, ``uniq``, ``sort``, etc\r\n  * Learn [awk in 20 minutes](http://ferd.ca/awk-in-20-minutes.html)\r\n  * Check out some more advanced tools for [Data Science at the Command Line](http://datascienceatthecommandline.com)\r\n  * Do Codecademy's interactive [command line tutorial](https://www.codecademy.com/learn/learn-the-command-line) (the free portion)\r\n  * See these [Introduction to Counting](https://speakerdeck.com/jhofman/modeling-social-data-lecture-2-introduction-to-counting) slides\r\n\r\n## Command line exercises\r\n  * Pull changes from the msr-ds3/coursework repo: `git pull upstream master`\r\n  * Use the [download_trips.sh](download_trips.sh) file to download Citibike trip data by running `bash download_trips.sh` or `./download_trips.sh`\r\n  * Fill in solutions under each comment in [citibike.sh](citibike.sh) using the `201402-citibike-tripdata.csv` file\r\n\r\n\r\n## Save your work\r\n  * Make sure to save your work and push it to GitHub. Do this in three steps:\r\n  \t1. `git add` and `git commit` and new files to your local repository. (Omit large data files.)\r\n  \t2. `git pull upstream master` to grab changes from this repository, and resolve any merge conflicts, commiting the final results.\r\n  \t3. `git push origin master` to push things back up to your GitHub fork of the course repository.\r\n  * Finish by submitting a pull request with your solutions so we can review them! (We won't merge the request, but it's a good way for the TA to provide feedback.)\r\n\r\n\r\n# Day 3\r\n\r\n## R in Visual Studio Code\r\n  * Install the [R extension for VSCode](https://marketplace.visualstudio.com/items?itemName=REditorSupport.r)\r\n  * Install the R language server by typing the following in an R terminal: `install.packages(\"languageserver\")`\r\n  * Install the `tidyverse` package, which includes  `dplyr`, `ggplot2`, and more, in an R terminal: `install.packages('tidyverse', dependencies = T)`\r\n\r\n## Intro to R\r\n\r\n  * See the [Data Wrangling in R](https://speakerdeck.com/jhofman/modeling-social-data-lecture-3-data-manipulation-in-r) slides\r\n  * Review [intro_to_r.ipynb](intro_to_r.ipynb) for an introduction to R\r\n  * See Chapter 3 of the 2nd edition of [R for Data Science](https://r4ds.hadley.nz) for the basics of dplyr\r\n\r\n## R counting exercises\r\n  * Use the [musical pairs script](students/musical_pairs.sh) to determine your programming partner each day\r\n  * Fill in solutions to the counting exercises under each comment in [citibike.R](citibike.R)\r\n  * Do the following exercises from Chapter 5 of the 1st edition of [R for Data Science](http://r4ds.had.co.nz):\r\n    * Section [5.2.4](https://r4ds.had.co.nz/transform.html#exercises-8), exercises 1 and 3\r\n    * Section [5.5.2](https://r4ds.had.co.nz/transform.html#exercises-11), exercise 2\r\n    * Section [5.7.1](https://r4ds.had.co.nz/transform.html#exercises-13), exercise 3\r\n\r\n## Learn more\r\n  * Do the free portion of [Codecademy's introduction to R](https://www.codecademy.com/learn/learn-r), chapters 1, 2, and 3\r\n  * References:\r\n    * [Basic types](http://www.r-tutor.com/r-introduction/basic-data-types): (numeric, character, logical, factor)\r\n    * Vectors, lists, dataframes: a [one page reference](http://www.statmethods.net/input/datatypes.html) and [more details](https://en.wikibooks.org/wiki/R_Programming/Data_types)\r\n\t* [Cyclismo's](http://www.cyclismo.org/tutorial/R/index.html) more extensive tutorial\r\n\t* Rstudio's [data wrangling cheatsheet](http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)\r\n\t* The [tidyverse style guide](https://style.tidyverse.org)\r\n\t* Hadley Wickham's [style guide](http://adv-r.had.co.nz/Style.html)\r\n\t* The [dplyr vignette](https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html)\r\n\t* Sean Anderson's [dplyr and pipes examples](http://seananderson.ca/2014/09/13/dplyr-intro.html) ([code](https://github.com/seananderson/dplyr-intro-2014) on github)\r\n\r\n  * Tutorials:\r\n  \t* [DataCamp's introduction to R](http://datacamp.com/courses/free-introduction-to-r) tutorials (or Hadley's [Advanced R](http://adv-r.had.co.nz) if you're a pro)\r\n  \t* [DataCamp's Data Manipulation in R](https://campus.datacamp.com/courses/dplyr-data-manipulation-r-tutorial) tutorial\r\n  \t* [Datacamp's Introduction to the Tidyverse](https://www.datacamp.com/courses/introduction-to-the-tidyverse) tutorial\r\n\r\n\r\n# Day 4\r\n\r\n## Plotting\r\n\r\n  * See the [Data visualization](https://speakerdeck.com/jhofman/modeling-social-data-lecture-4-data-visualization) slides\r\n  * Review [visualization_with_ggplot2.ipynb](visualization_with_ggplot2.ipynb) for an introduction to data visualization with ggplot2\r\n\r\n## Plotting exercises   \r\n  * Do the following exercises from Chapter 3 of the 1st edition of [R for Data Science](http://r4ds.had.co.nz) and do the following exercises:\r\n    * Section [3.3.1](https://r4ds.had.co.nz/data-visualisation.html#exercises-1), exercises 1, 2, and 3\r\n    * Section [3.5.1](https://r4ds.had.co.nz/data-visualisation.html#exercises-2), exercises 1 and 4\r\n    * Section [3.6.1](https://r4ds.had.co.nz/data-visualisation.html#exercises-3), exercises 5 and 6\r\n    * Section [3.8.1](https://r4ds.had.co.nz/data-visualisation.html#exercises-5), exercises 1 and 2\r\n  * Citibike plots\r\n    * Run the [load_trips.R](load_trips.R) file to generate `trips.RData`\r\n    * Write code in [plot_trips.R](plot_trips.R) to create visualizations using `trips.RData`\r\n\r\n## Learn more\r\n  * Read Chapters 1, 9, and 10 of the 2nd edition of [R for Data Science](https://r4ds.hadley.nz) on visualization\r\n  * Tutorials:\r\n    * DataCamp's [Data Visualization with ggplot2 (part 1)](https://campus.datacamp.com/courses/data-visualization-with-ggplot2-1/) tutorial\r\n  * References:\r\n    * RStudio's [ggplot2 cheatsheet](https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf)\r\n    * Sean Anderson's [ggplot2 slides](http://seananderson.ca/courses/12-ggplot2/ggplot2_slides_with_examples.pdf) ([code]((http://github.com/seananderson/datawranglR))) for more examples \r\n    * The [R Graphics Cookbook](http://www.cookbook-r.com/Graphs/)\r\n    * The [official ggplot2 docs](http://docs.ggplot2.org/current/)\r\n    * Videos on [Visualizing Data with ggplot2](http://varianceexplained.org/RData/lessons/lesson2/)\r\n\r\n<!--\r\n\r\n# Day 5\r\n\r\n## Combining and reshaping data\r\n  * Review [combine_and_reshape_in_r.ipynb](combine_and_reshape_in_r.ipynb) on joins with dplyr and reshaping with tidyr\r\n\r\n## Plotting exercises\r\n  * Finish up the Citibike plotting exercises in [plot_trips.R](plot_trips.R), including the plots that involve reshaping data\r\n\r\n## Combining and reshaping exercises\r\n  * Read chapters 5 and 19 of the 2nd edition of [R for Data Science](http://r4ds.had.co.nz) on reshaping and joins\r\n  * Do the following exercises from the 1st edition of [R for Data Science](http://r4ds.had.co.nz):\r\n    * Section [12.2.1](https://r4ds.had.co.nz/tidy-data.html#exercises-23), exercise 2\r\n    * Section [12.3.3](https://r4ds.had.co.nz/tidy-data.html#exercises-24) exercises 1 and 3 \r\n\r\n## Rmarkdown\r\n\r\n  * Read Chapter 27 of the 1st edition of [R for Data Science](http://r4ds.had.co.nz) on Rmarkdown\r\n  * Do the following exercises from the 1st edition of [R for Data Science](http://r4ds.had.co.nz):\r\n    * Section [27.2.1](https://r4ds.had.co.nz/r-markdown.html#exercises-71), exercises 1 and 2 (try keyboard shortcuts: ctrl-shift-enter to run chunks, and ctrl-shift-k to knit the document)\r\n    * Section [27.3.1](https://r4ds.had.co.nz/r-markdown.html#exercises-72) exercise 3, using [this file](diamond-sizes.Rmd)\r\n    * Section [27.4.7](https://r4ds.had.co.nz/r-markdown.html#exercises-72), exercise 1\r\n\r\n## Learn more\r\n\r\n  * Do part 1 of Datacamp's [Cleaning Data in R](https://www.datacamp.com/courses/cleaning-data-in-r) tutorial\r\n  * Additional references:\r\n    * The tidyr [vignette on tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)\r\n    * The dplyr [vignette on two-table verbs](https://cran.r-project.org/web/packages/dplyr/vignettes/two-table.html) for joins\r\n    * A [visual guide to joins](http://blog.codinghorror.com/a-visual-explanation-of-sql-joins/)\r\n\r\n-->"}}
{"ts":"2025-05-30T14:21:21.102Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","blurredAt":"2025-05-30T14:21:21.102Z","focusDurationMs":27845}}
{"ts":"2025-05-30T14:21:21.122Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/README.md","focusedAt":"2025-05-30T14:21:21.122Z"}}
{"ts":"2025-05-30T14:21:39.368Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/README.md","blurredAt":"2025-05-30T14:21:39.368Z","focusDurationMs":18246}}
{"ts":"2025-05-30T14:21:43.619Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/README.md","openedAt":1748614881080,"focusDurationMs":0,"focusedMs":18246}}
{"ts":"2025-05-30T14:21:53.364Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","initialContent":"library(dplyr)\r\nlibrary(readr)\r\n\r\n# define a function to turn strings into datetimes\r\nparse_datetime <- function(s, format=\"%Y-%m-%d %H:%M:%S\") {\r\n  as.POSIXct(as.character(s), format=format)\r\n}\r\n\r\n########################################\r\n# load and clean trip data\r\n########################################\r\n\r\n# load each month of the trip data into one big data frame\r\ncsvs <- Sys.glob('*-tripdata.csv')\r\ntrips <- data.frame()\r\nfor (csv in csvs) {\r\n  print(csv)\r\n  tmp <- read_csv(csv, na='\\\\N')\r\n\r\n  # the date format changed to something ugly in 2014-09 which read_csv doesn't recognize as a datetime,\r\n  # so manually convert the date from a string to a datetime\r\n  if (typeof(tmp$starttime) == \"character\")\r\n    tmp <- mutate(tmp,\r\n                  starttime=parse_datetime(starttime, \"%m/%d/%Y %H:%M\"),\r\n                  stoptime=parse_datetime(stoptime, \"%m/%d/%Y %H:%M\"))\r\n\r\n  trips <- rbind(trips, tmp)\r\n}\r\n\r\n# replace spaces in column names with underscores\r\nnames(trips) <- gsub(' ', '_', names(trips))\r\n\r\n# add a column for year/month/day (without time of day)\r\ntrips <- mutate(trips, ymd=as.Date(starttime))\r\n\r\n# recode gender as a factor 0->\"Unknown\", 1->\"Male\", 2->\"Female\"\r\ntrips <- mutate(trips, gender=factor(gender, levels=c(0,1,2), labels=c(\"Unknown\",\"Male\",\"Female\")))\r\n\r\n########################################\r\n# load and clean weather data\r\n########################################\r\n\r\n# load weather data from belvedere tower in central park\r\n# https://www.ncei.noaa.gov/orders/cdo/2992179.csv\r\n# ordered from\r\n# http://www.ncdc.noaa.gov/cdo-web/datasets/GHCND/stations/GHCND:USW00094728/detail\r\nweather <- read.table('weather.csv', header=T, sep=',')\r\n\r\n# extract just a few columns, lowercase column names, and parse dates\r\nweather <- select(weather, DATE, PRCP, SNWD, SNOW, TMAX, TMIN)\r\nnames(weather) <- tolower(names(weather))\r\nweather <- mutate(weather,\r\n                  ymd = as.Date(parse_datetime(date, \"%Y-%m-%d\")))\r\nweather <- tbl_df(weather)\r\n\r\n# save data frame for easy loading in the future\r\nsave(trips, weather, file='trips.RData')\r\n\r\n"}}
{"ts":"2025-05-30T14:21:53.391Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","focusedAt":"2025-05-30T14:21:53.391Z"}}
{"ts":"2025-05-30T14:21:54.395Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","initialContent":"########################################\r\n# load libraries\r\n########################################\r\n\r\n# load some packages that we'll need\r\nlibrary(tidyverse)\r\nlibrary(scales)\r\n\r\n# be picky about white backgrounds on our plots\r\ntheme_set(theme_bw())\r\n\r\n# load RData file output by load_trips.R\r\nload('trips.RData')\r\n\r\n\r\n########################################\r\n# plot trip data\r\n########################################\r\n\r\n# plot the distribution of trip times across all rides (compare a histogram vs. a density plot)\r\n\r\nggplot(trips, aes(x = tripduration)) + geom_histogram()\r\n\r\n# plot the distribution of trip times by rider type indicated using color and fill (compare a histogram vs. a density plot)\r\n\r\n# plot the total number of trips on each day in the dataset\r\n\r\n# plot the total number of trips (on the y axis) by age (on the x axis) and gender (indicated with color)\r\n\r\n# plot the ratio of male to female trips (on the y axis) by age (on the x axis)\r\n# hint: use the pivot_wider() function to reshape things to make it easier to compute this ratio\r\n# (you can skip this and come back to it tomorrow if we haven't covered pivot_wider() yet)\r\n\r\n########################################\r\n# plot weather data\r\n########################################\r\n# plot the minimum temperature (on the y axis) over each day (on the x axis)\r\n\r\n# plot the minimum temperature and maximum temperature (on the y axis, with different colors) over each day (on the x axis)\r\n# hint: try using the pivot_longer() function for this to reshape things before plotting\r\n# (you can skip this and come back to it tomorrow if we haven't covered reshaping data yet)\r\n\r\n########################################\r\n# plot trip and weather data\r\n########################################\r\n\r\n# join trips and weather\r\ntrips_with_weather <- inner_join(trips, weather, by=\"ymd\")\r\n\r\n# plot the number of trips as a function of the minimum temperature, where each point represents a day\r\n# you'll need to summarize the trips and join to the weather data to do this\r\n\r\n# repeat this, splitting results by whether there was substantial precipitation or not\r\n# you'll need to decide what constitutes \"substantial precipitation\" and create a new T/F column to indicate this\r\n\r\n# add a smoothed fit on top of the previous plot, using geom_smooth\r\n\r\n# compute the average number of trips and standard deviation in number of trips by hour of the day\r\n# hint: use the hour() function from the lubridate package\r\n\r\n# plot the above\r\n\r\n# repeat this, but now split the results by day of the week (Monday, Tuesday, ...) or weekday vs. weekend days\r\n# hint: use the wday() function from the lubridate package\r\n"}}
{"ts":"2025-05-30T14:21:54.409Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","blurredAt":"2025-05-30T14:21:54.409Z","focusDurationMs":1018}}
{"ts":"2025-05-30T14:21:54.421Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","focusedAt":"2025-05-30T14:21:54.421Z"}}
{"ts":"2025-05-30T14:21:56.043Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/citibike.R","openedAt":1748614805089,"focusDurationMs":0,"focusedMs":44852}}
{"ts":"2025-05-30T14:21:57.062Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","blurredAt":"2025-05-30T14:21:57.062Z","focusDurationMs":2641}}
{"ts":"2025-05-30T14:22:23.541Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:22:23.541Z"}}
{"ts":"2025-05-30T14:22:24.601Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:22:24.601Z"}}
{"ts":"2025-05-30T14:22:37.534Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:22:37.534Z","windowFocusDurationMs":12933}}
{"ts":"2025-05-30T14:22:42.929Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:22:42.929Z"}}
{"ts":"2025-05-30T14:22:50.612Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:22:50.612Z","windowFocusDurationMs":7683}}
{"ts":"2025-05-30T14:22:52.607Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:22:52.607Z"}}
{"ts":"2025-05-30T14:22:52.922Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:22:52.922Z","windowFocusDurationMs":315}}
{"ts":"2025-05-30T14:22:53.559Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:22:53.559Z"}}
{"ts":"2025-05-30T14:22:54.543Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:22:54.543Z","windowFocusDurationMs":984}}
{"ts":"2025-05-30T14:22:55.263Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:22:55.263Z"}}
{"ts":"2025-05-30T14:23:42.513Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:23:42.512Z"}}
{"ts":"2025-05-30T14:25:20.149Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:25:20.149Z"}}
{"ts":"2025-05-30T14:25:38.495Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:25:38.495Z","windowFocusDurationMs":18346}}
{"ts":"2025-05-30T14:25:41.783Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:25:41.783Z"}}
{"ts":"2025-05-30T14:26:04.332Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:26:04.332Z","windowFocusDurationMs":22549}}
{"ts":"2025-05-30T14:26:30.165Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:26:30.164Z"}}
{"ts":"2025-05-30T14:26:34.367Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:26:34.367Z"}}
{"ts":"2025-05-30T14:26:36.496Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:26:36.496Z","windowFocusDurationMs":2129}}
{"ts":"2025-05-30T14:26:36.975Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:26:36.975Z"}}
{"ts":"2025-05-30T14:26:45.532Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:26:45.532Z","windowFocusDurationMs":8557}}
{"ts":"2025-05-30T14:38:48.303Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:38:48.303Z"}}
{"ts":"2025-05-30T14:38:49.140Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:38:49.140Z","windowFocusDurationMs":837}}
{"ts":"2025-05-30T14:38:51.299Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:38:51.299Z"}}
{"ts":"2025-05-30T14:38:52.174Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:38:52.174Z"}}
{"ts":"2025-05-30T14:38:52.843Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:38:52.843Z","windowFocusDurationMs":669}}
{"ts":"2025-05-30T14:38:53.097Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:38:53.097Z"}}
{"ts":"2025-05-30T14:38:53.604Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:38:53.604Z","windowFocusDurationMs":507}}
{"ts":"2025-05-30T14:40:03.240Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:40:03.240Z"}}
{"ts":"2025-05-30T14:40:07.424Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:40:07.424Z"}}
{"ts":"2025-05-30T14:40:14.554Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:40:14.554Z"}}
{"ts":"2025-05-30T14:41:18.836Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","focusedAt":"2025-05-30T14:41:18.836Z"}}
{"ts":"2025-05-30T14:42:42.128Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","blurredAt":"2025-05-30T14:42:42.128Z","focusDurationMs":83292,"windowFocusDurationMs":147574}}
{"ts":"2025-05-30T14:42:46.172Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:42:46.172Z"}}
{"ts":"2025-05-30T14:43:07.639Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","openedAt":1748614805092,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:43:07.640Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","openedAt":1748614914395,"focusDurationMs":0,"focusedMs":2641}}
{"ts":"2025-05-30T14:43:07.639Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","openedAt":1748614913364,"focusDurationMs":21467,"focusedMs":105777}}
{"ts":"2025-05-30T14:43:13.774Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","initialContent":"library(dplyr)\r\nlibrary(readr)\r\n\r\n# define a function to turn strings into datetimes\r\nparse_datetime <- function(s, format=\"%Y-%m-%d %H:%M:%S\") {\r\n  as.POSIXct(as.character(s), format=format)\r\n}\r\n\r\n########################################\r\n# load and clean trip data\r\n########################################\r\n\r\n# load each month of the trip data into one big data frame\r\ncsvs <- Sys.glob('*-tripdata.csv')\r\ntrips <- data.frame()\r\nfor (csv in csvs) {\r\n  print(csv)\r\n  tmp <- read_csv(csv, na='\\\\N')\r\n\r\n  # the date format changed to something ugly in 2014-09 which read_csv doesn't recognize as a datetime,\r\n  # so manually convert the date from a string to a datetime\r\n  if (typeof(tmp$starttime) == \"character\")\r\n    tmp <- mutate(tmp,\r\n                  starttime=parse_datetime(starttime, \"%m/%d/%Y %H:%M\"),\r\n                  stoptime=parse_datetime(stoptime, \"%m/%d/%Y %H:%M\"))\r\n\r\n  trips <- rbind(trips, tmp)\r\n}\r\n\r\n# replace spaces in column names with underscores\r\nnames(trips) <- gsub(' ', '_', names(trips))\r\n\r\n# add a column for year/month/day (without time of day)\r\ntrips <- mutate(trips, ymd=as.Date(starttime))\r\n\r\n# recode gender as a factor 0->\"Unknown\", 1->\"Male\", 2->\"Female\"\r\ntrips <- mutate(trips, gender=factor(gender, levels=c(0,1,2), labels=c(\"Unknown\",\"Male\",\"Female\")))\r\n\r\n########################################\r\n# load and clean weather data\r\n########################################\r\n\r\n# load weather data from belvedere tower in central park\r\n# https://www.ncei.noaa.gov/orders/cdo/2992179.csv\r\n# ordered from\r\n# http://www.ncdc.noaa.gov/cdo-web/datasets/GHCND/stations/GHCND:USW00094728/detail\r\nweather <- read.table('weather.csv', header=T, sep=',')\r\n\r\n# extract just a few columns, lowercase column names, and parse dates\r\nweather <- select(weather, DATE, PRCP, SNWD, SNOW, TMAX, TMIN)\r\nnames(weather) <- tolower(names(weather))\r\nweather <- mutate(weather,\r\n                  ymd = as.Date(parse_datetime(date, \"%Y-%m-%d\")))\r\nweather <- tbl_df(weather)\r\n\r\n# save data frame for easy loading in the future\r\nsave(trips, weather, file='trips.RData')\r\n\r\n"}}
{"ts":"2025-05-30T14:43:13.822Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","initialContent":"########################################\r\n# load libraries\r\n########################################\r\n\r\n# load some packages that we'll need\r\nlibrary(tidyverse)\r\nlibrary(scales)\r\n\r\n# be picky about white backgrounds on our plots\r\ntheme_set(theme_bw())\r\n\r\n# load RData file output by load_trips.R\r\nload('trips.RData')\r\n\r\n\r\n########################################\r\n# plot trip data\r\n########################################\r\n\r\n# plot the distribution of trip times across all rides (compare a histogram vs. a density plot)\r\n\r\nggplot(trips, aes(x = tripduration)) + geom_histogram()\r\n\r\n# plot the distribution of trip times by rider type indicated using color and fill (compare a histogram vs. a density plot)\r\n\r\n# plot the total number of trips on each day in the dataset\r\n\r\n# plot the total number of trips (on the y axis) by age (on the x axis) and gender (indicated with color)\r\n\r\n# plot the ratio of male to female trips (on the y axis) by age (on the x axis)\r\n# hint: use the pivot_wider() function to reshape things to make it easier to compute this ratio\r\n# (you can skip this and come back to it tomorrow if we haven't covered pivot_wider() yet)\r\n\r\n########################################\r\n# plot weather data\r\n########################################\r\n# plot the minimum temperature (on the y axis) over each day (on the x axis)\r\n\r\n# plot the minimum temperature and maximum temperature (on the y axis, with different colors) over each day (on the x axis)\r\n# hint: try using the pivot_longer() function for this to reshape things before plotting\r\n# (you can skip this and come back to it tomorrow if we haven't covered reshaping data yet)\r\n\r\n########################################\r\n# plot trip and weather data\r\n########################################\r\n\r\n# join trips and weather\r\ntrips_with_weather <- inner_join(trips, weather, by=\"ymd\")\r\n\r\n# plot the number of trips as a function of the minimum temperature, where each point represents a day\r\n# you'll need to summarize the trips and join to the weather data to do this\r\n\r\n# repeat this, splitting results by whether there was substantial precipitation or not\r\n# you'll need to decide what constitutes \"substantial precipitation\" and create a new T/F column to indicate this\r\n\r\n# add a smoothed fit on top of the previous plot, using geom_smooth\r\n\r\n# compute the average number of trips and standard deviation in number of trips by hour of the day\r\n# hint: use the hour() function from the lubridate package\r\n\r\n# plot the above\r\n\r\n# repeat this, but now split the results by day of the week (Monday, Tuesday, ...) or weekday vs. weekend days\r\n# hint: use the wday() function from the lubridate package\r\n"}}
{"ts":"2025-05-30T14:43:13.853Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","initialContent":"#!/bin/bash\n#\n\n# get date\n# parse date in a way where it is just numbers\n# don't select same team member (need to figure out combinations)\n#\n\n\ncd students\n\nname=($(ls | cut -d' ' -f1 | awk -F. '{print $1}'))\n\nday=$(date +%d)\n\ncombination=$((day % 11))\n\nif (( $combination > 6 )); then\n    iterations=$((combination - 6))\n    for ((i=0; i < iterations; i++)); do\n        reserve=${name[1]}\n        for ((j=1; j<12; j+=2)); do\n            if (( j+2 < 12 )); then\n                name[j]=${name[$((j+2))]}\n            else\n                name[j]=${name[$(((j+2) % 12))]}\n            fi\n        done\n        name[11]=$reserve\n    done\nelse\n    for ((i=0; i < combination; i++)); do\n        temp=${name[1]}\n        for ((j=2; j<12; j+=2)); do\n            if (( j == 2)); then\n                name[j-1]=${name[j]}\n            else\n                name[j-2]=${name[j]}\n            fi\n        done\n        name[10]=$temp\n    done\nfi\n\nfor ((i=0; i < 12; i++)); do\n    if (( i % 2 == 0)); then\n        echo \"--------------\"\n    fi\n    echo ${name[i]}\ndone\n\n\n"}}
{"ts":"2025-05-30T14:43:13.854Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","focusedAt":"2025-05-30T14:43:13.854Z"}}
{"ts":"2025-05-30T14:43:26.878Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","blurredAt":"2025-05-30T14:43:26.878Z","focusDurationMs":13024}}
{"ts":"2025-05-30T14:43:54.700Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:43:54.700Z"}}
{"ts":"2025-05-30T14:43:55.551Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","blurredAt":"2025-05-30T14:43:55.551Z","focusDurationMs":851,"windowFocusDurationMs":851}}
{"ts":"2025-05-30T14:44:22.238Z","type":"window-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","blurredAt":"2025-05-30T14:44:22.238Z","focusDurationMs":27538}}
{"ts":"2025-05-30T14:44:43.790Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:44:43.790Z"}}
{"ts":"2025-05-30T14:44:46.608Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:44:46.608Z"}}
{"ts":"2025-05-30T14:44:48.549Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","savedAt":"2025-05-30T14:44:48.547Z","diff":[{"count":2,"added":false,"removed":true,"value":"parse_datetime <- function(s, format=\"%Y-%m-%d %H:%M:%S\") {\r\n  as.POSIXct(as.character(s), format=format)\r\n"},{"count":2,"added":true,"removed":false,"value":"parse_datetime <- function(s, format = \"%Y-%m-%d %H:%M:%S\") {\r\n  as.POSIXct(as.character(s), format = format)\r\n"},{"count":1,"added":false,"removed":true,"value":"csvs <- Sys.glob('*-tripdata.csv')\r\n"},{"count":1,"added":true,"removed":false,"value":"csvs <- Sys.glob(\"*-tripdata.csv\")\r\n"},{"count":1,"added":false,"removed":true,"value":"  tmp <- read_csv(csv, na='\\\\N')\r\n"},{"count":1,"added":true,"removed":false,"value":"  tmp <- read_csv(csv, na = \"\\\\N\")\r\n"},{"count":1,"added":false,"removed":true,"value":"  if (typeof(tmp$starttime) == \"character\")\r\n"},{"count":1,"added":true,"removed":false,"value":"  if (typeof(tmp$starttime) == \"character\") {\r\n"},{"count":2,"added":false,"removed":true,"value":"                  starttime=parse_datetime(starttime, \"%m/%d/%Y %H:%M\"),\r\n                  stoptime=parse_datetime(stoptime, \"%m/%d/%Y %H:%M\"))\r\n"},{"count":4,"added":true,"removed":false,"value":"      starttime = parse_datetime(starttime, \"%m/%d/%Y %H:%M\"),\r\n      stoptime = parse_datetime(stoptime, \"%m/%d/%Y %H:%M\")\r\n    )\r\n  }\r\n"},{"count":1,"added":false,"removed":true,"value":"names(trips) <- gsub(' ', '_', names(trips))\r\n"},{"count":1,"added":true,"removed":false,"value":"names(trips) <- gsub(\" \", \"_\", names(trips))\r\n"},{"count":1,"added":false,"removed":true,"value":"trips <- mutate(trips, ymd=as.Date(starttime))\r\n"},{"count":1,"added":true,"removed":false,"value":"trips <- mutate(trips, ymd = as.Date(starttime))\r\n"},{"count":1,"added":false,"removed":true,"value":"trips <- mutate(trips, gender=factor(gender, levels=c(0,1,2), labels=c(\"Unknown\",\"Male\",\"Female\")))\r\n"},{"count":1,"added":true,"removed":false,"value":"trips <- mutate(trips, gender = factor(gender, levels = c(0, 1, 2), labels = c(\"Unknown\", \"Male\", \"Female\")))\r\n"},{"count":1,"added":false,"removed":true,"value":"weather <- read.table('weather.csv', header=T, sep=',')\r\n"},{"count":1,"added":true,"removed":false,"value":"weather <- read.table(\"weather.csv\", header = T, sep = \",\")\r\n"},{"count":1,"added":false,"removed":true,"value":"                  ymd = as.Date(parse_datetime(date, \"%Y-%m-%d\")))\r\n"},{"count":2,"added":true,"removed":false,"value":"  ymd = as.Date(parse_datetime(date, \"%Y-%m-%d\"))\r\n)\r\n"},{"count":2,"added":false,"removed":true,"value":"save(trips, weather, file='trips.RData')\r\n\r\n"},{"count":1,"added":true,"removed":false,"value":"save(trips, weather, file = \"trips.RData\")\r\n"}]}}
{"ts":"2025-05-30T14:44:48.551Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","savedAt":"2025-05-30T14:44:48.547Z"}}
{"ts":"2025-05-30T14:44:51.259Z","type":"file-save-diff","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","savedAt":"2025-05-30T14:44:51.259Z","diff":[]}}
{"ts":"2025-05-30T14:44:51.260Z","type":"file-save","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","savedAt":"2025-05-30T14:44:51.259Z"}}
{"ts":"2025-05-30T14:46:20.968Z","type":"file-blur","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","blurredAt":"2025-05-30T14:46:20.968Z","focusDurationMs":94360}}
{"ts":"2025-05-30T14:47:20.316Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:47:20.316Z","windowFocusDurationMs":153708}}
{"ts":"2025-05-30T14:47:33.780Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:47:33.780Z"}}
{"ts":"2025-05-30T14:47:36.518Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:47:36.518Z","windowFocusDurationMs":2738}}
{"ts":"2025-05-30T14:48:00.795Z","type":"window-blur","payload":{"blurredAt":"2025-05-30T14:48:00.795Z"}}
{"ts":"2025-05-30T14:50:21.085Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:50:21.085Z"}}
{"ts":"2025-05-30T14:50:40.529Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:50:40.529Z"}}
{"ts":"2025-05-30T14:50:52.087Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","openedAt":1748616193774,"focusDurationMs":0,"focusedMs":135773}}
{"ts":"2025-05-30T14:50:52.088Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","openedAt":1748616193822,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:50:52.088Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","openedAt":1748616193853,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:50:55.856Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","initialContent":"library(dplyr)\r\nlibrary(readr)\r\n\r\n# define a function to turn strings into datetimes\r\nparse_datetime <- function(s, format = \"%Y-%m-%d %H:%M:%S\") {\r\n  as.POSIXct(as.character(s), format = format)\r\n}\r\n\r\n########################################\r\n# load and clean trip data\r\n########################################\r\n\r\n# load each month of the trip data into one big data frame\r\ncsvs <- Sys.glob(\"*-tripdata.csv\")\r\ntrips <- data.frame()\r\nfor (csv in csvs) {\r\n  print(csv)\r\n  tmp <- read_csv(csv, na = \"\\\\N\")\r\n\r\n  # the date format changed to something ugly in 2014-09 which read_csv doesn't recognize as a datetime,\r\n  # so manually convert the date from a string to a datetime\r\n  if (typeof(tmp$starttime) == \"character\") {\r\n    tmp <- mutate(tmp,\r\n      starttime = parse_datetime(starttime, \"%m/%d/%Y %H:%M\"),\r\n      stoptime = parse_datetime(stoptime, \"%m/%d/%Y %H:%M\")\r\n    )\r\n  }\r\n\r\n  trips <- rbind(trips, tmp)\r\n}\r\n\r\n# replace spaces in column names with underscores\r\nnames(trips) <- gsub(\" \", \"_\", names(trips))\r\n\r\n# add a column for year/month/day (without time of day)\r\ntrips <- mutate(trips, ymd = as.Date(starttime))\r\n\r\n# recode gender as a factor 0->\"Unknown\", 1->\"Male\", 2->\"Female\"\r\ntrips <- mutate(trips, gender = factor(gender, levels = c(0, 1, 2), labels = c(\"Unknown\", \"Male\", \"Female\")))\r\n\r\n########################################\r\n# load and clean weather data\r\n########################################\r\n\r\n# load weather data from belvedere tower in central park\r\n# https://www.ncei.noaa.gov/orders/cdo/2992179.csv\r\n# ordered from\r\n# http://www.ncdc.noaa.gov/cdo-web/datasets/GHCND/stations/GHCND:USW00094728/detail\r\nweather <- read.table(\"weather.csv\", header = T, sep = \",\")\r\n\r\n# extract just a few columns, lowercase column names, and parse dates\r\nweather <- select(weather, DATE, PRCP, SNWD, SNOW, TMAX, TMIN)\r\nnames(weather) <- tolower(names(weather))\r\nweather <- mutate(weather,\r\n  ymd = as.Date(parse_datetime(date, \"%Y-%m-%d\"))\r\n)\r\nweather <- tbl_df(weather)\r\n\r\n# save data frame for easy loading in the future\r\nsave(trips, weather, file = \"trips.RData\")\r\n"}}
{"ts":"2025-05-30T14:50:55.858Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","initialContent":"########################################\r\n# load libraries\r\n########################################\r\n\r\n# load some packages that we'll need\r\nlibrary(tidyverse)\r\nlibrary(scales)\r\n\r\n# be picky about white backgrounds on our plots\r\ntheme_set(theme_bw())\r\n\r\n# load RData file output by load_trips.R\r\nload('trips.RData')\r\n\r\n\r\n########################################\r\n# plot trip data\r\n########################################\r\n\r\n# plot the distribution of trip times across all rides (compare a histogram vs. a density plot)\r\n\r\nggplot(trips, aes(x = tripduration)) + geom_histogram()\r\n\r\n# plot the distribution of trip times by rider type indicated using color and fill (compare a histogram vs. a density plot)\r\n\r\n# plot the total number of trips on each day in the dataset\r\n\r\n# plot the total number of trips (on the y axis) by age (on the x axis) and gender (indicated with color)\r\n\r\n# plot the ratio of male to female trips (on the y axis) by age (on the x axis)\r\n# hint: use the pivot_wider() function to reshape things to make it easier to compute this ratio\r\n# (you can skip this and come back to it tomorrow if we haven't covered pivot_wider() yet)\r\n\r\n########################################\r\n# plot weather data\r\n########################################\r\n# plot the minimum temperature (on the y axis) over each day (on the x axis)\r\n\r\n# plot the minimum temperature and maximum temperature (on the y axis, with different colors) over each day (on the x axis)\r\n# hint: try using the pivot_longer() function for this to reshape things before plotting\r\n# (you can skip this and come back to it tomorrow if we haven't covered reshaping data yet)\r\n\r\n########################################\r\n# plot trip and weather data\r\n########################################\r\n\r\n# join trips and weather\r\ntrips_with_weather <- inner_join(trips, weather, by=\"ymd\")\r\n\r\n# plot the number of trips as a function of the minimum temperature, where each point represents a day\r\n# you'll need to summarize the trips and join to the weather data to do this\r\n\r\n# repeat this, splitting results by whether there was substantial precipitation or not\r\n# you'll need to decide what constitutes \"substantial precipitation\" and create a new T/F column to indicate this\r\n\r\n# add a smoothed fit on top of the previous plot, using geom_smooth\r\n\r\n# compute the average number of trips and standard deviation in number of trips by hour of the day\r\n# hint: use the hour() function from the lubridate package\r\n\r\n# plot the above\r\n\r\n# repeat this, but now split the results by day of the week (Monday, Tuesday, ...) or weekday vs. weekend days\r\n# hint: use the wday() function from the lubridate package\r\n"}}
{"ts":"2025-05-30T14:50:55.860Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","initialContent":"#!/bin/bash\n#\n\n# get date\n# parse date in a way where it is just numbers\n# don't select same team member (need to figure out combinations)\n#\n\n\ncd students\n\nname=($(ls | cut -d' ' -f1 | awk -F. '{print $1}'))\n\nday=$(date +%d)\n\ncombination=$((day % 11))\n\nif (( $combination > 6 )); then\n    iterations=$((combination - 6))\n    for ((i=0; i < iterations; i++)); do\n        reserve=${name[1]}\n        for ((j=1; j<12; j+=2)); do\n            if (( j+2 < 12 )); then\n                name[j]=${name[$((j+2))]}\n            else\n                name[j]=${name[$(((j+2) % 12))]}\n            fi\n        done\n        name[11]=$reserve\n    done\nelse\n    for ((i=0; i < combination; i++)); do\n        temp=${name[1]}\n        for ((j=2; j<12; j+=2)); do\n            if (( j == 2)); then\n                name[j-1]=${name[j]}\n            else\n                name[j-2]=${name[j]}\n            fi\n        done\n        name[10]=$temp\n    done\nfi\n\nfor ((i=0; i < 12; i++)); do\n    if (( i % 2 == 0)); then\n        echo \"--------------\"\n    fi\n    echo ${name[i]}\ndone\n\n\n"}}
{"ts":"2025-05-30T14:51:42.277Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/.git/MERGE_MSG","initialContent":"Merge branch 'master' of https://github.com/msr-ds3/coursework\n# Please enter a commit message to explain why this merge is necessary,\n# especially if it merges an updated upstream into a topic branch.\n#\n# Lines starting with '#' will be ignored, and an empty message aborts\n# the commit.\n"}}
{"ts":"2025-05-30T14:51:42.333Z","type":"file-focus","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/.git/MERGE_MSG","focusedAt":"2025-05-30T14:51:42.333Z"}}
{"ts":"2025-05-30T14:51:44.363Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/.git/MERGE_MSG","openedAt":1748616702277,"focusDurationMs":2029,"focusedMs":2029}}
{"ts":"2025-05-30T14:51:50.282Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","openedAt":1748616655856,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:51:50.282Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","openedAt":1748616655858,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:51:50.283Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","openedAt":1748616655860,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:51:54.091Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","initialContent":"library(dplyr)\r\nlibrary(readr)\r\n\r\n# define a function to turn strings into datetimes\r\nparse_datetime <- function(s, format = \"%Y-%m-%d %H:%M:%S\") {\r\n  as.POSIXct(as.character(s), format = format)\r\n}\r\n\r\n########################################\r\n# load and clean trip data\r\n########################################\r\n\r\n# load each month of the trip data into one big data frame\r\ncsvs <- Sys.glob(\"*-tripdata.csv\")\r\ntrips <- data.frame()\r\nfor (csv in csvs) {\r\n  print(csv)\r\n  tmp <- read_csv(csv, na = \"\\\\N\")\r\n\r\n  # the date format changed to something ugly in 2014-09 which read_csv doesn't recognize as a datetime,\r\n  # so manually convert the date from a string to a datetime\r\n  if (typeof(tmp$starttime) == \"character\") {\r\n    tmp <- mutate(tmp,\r\n      starttime = parse_datetime(starttime, \"%m/%d/%Y %H:%M\"),\r\n      stoptime = parse_datetime(stoptime, \"%m/%d/%Y %H:%M\")\r\n    )\r\n  }\r\n\r\n  trips <- rbind(trips, tmp)\r\n}\r\n\r\n# replace spaces in column names with underscores\r\nnames(trips) <- gsub(\" \", \"_\", names(trips))\r\n\r\n# add a column for year/month/day (without time of day)\r\ntrips <- mutate(trips, ymd = as.Date(starttime))\r\n\r\n# recode gender as a factor 0->\"Unknown\", 1->\"Male\", 2->\"Female\"\r\ntrips <- mutate(trips, gender = factor(gender, levels = c(0, 1, 2), labels = c(\"Unknown\", \"Male\", \"Female\")))\r\n\r\n########################################\r\n# load and clean weather data\r\n########################################\r\n\r\n# load weather data from belvedere tower in central park\r\n# https://www.ncei.noaa.gov/orders/cdo/2992179.csv\r\n# ordered from\r\n# http://www.ncdc.noaa.gov/cdo-web/datasets/GHCND/stations/GHCND:USW00094728/detail\r\nweather <- read.table(\"weather.csv\", header = T, sep = \",\")\r\n\r\n# extract just a few columns, lowercase column names, and parse dates\r\nweather <- select(weather, DATE, PRCP, SNWD, SNOW, TMAX, TMIN)\r\nnames(weather) <- tolower(names(weather))\r\nweather <- mutate(weather,\r\n  ymd = as.Date(parse_datetime(date, \"%Y-%m-%d\"))\r\n)\r\nweather <- tbl_df(weather)\r\n\r\n# save data frame for easy loading in the future\r\nsave(trips, weather, file = \"trips.RData\")\r\n"}}
{"ts":"2025-05-30T14:51:54.094Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","initialContent":"########################################\r\n# load libraries\r\n########################################\r\n\r\n# load some packages that we'll need\r\nlibrary(tidyverse)\r\nlibrary(scales)\r\n\r\n# be picky about white backgrounds on our plots\r\ntheme_set(theme_bw())\r\n\r\n# load RData file output by load_trips.R\r\nload('trips.RData')\r\n\r\n\r\n########################################\r\n# plot trip data\r\n########################################\r\n\r\n# plot the distribution of trip times across all rides (compare a histogram vs. a density plot)\r\n\r\nggplot(trips, aes(x = tripduration)) + geom_histogram()\r\n\r\n# plot the distribution of trip times by rider type indicated using color and fill (compare a histogram vs. a density plot)\r\n\r\n# plot the total number of trips on each day in the dataset\r\n\r\n# plot the total number of trips (on the y axis) by age (on the x axis) and gender (indicated with color)\r\n\r\n# plot the ratio of male to female trips (on the y axis) by age (on the x axis)\r\n# hint: use the pivot_wider() function to reshape things to make it easier to compute this ratio\r\n# (you can skip this and come back to it tomorrow if we haven't covered pivot_wider() yet)\r\n\r\n########################################\r\n# plot weather data\r\n########################################\r\n# plot the minimum temperature (on the y axis) over each day (on the x axis)\r\n\r\n# plot the minimum temperature and maximum temperature (on the y axis, with different colors) over each day (on the x axis)\r\n# hint: try using the pivot_longer() function for this to reshape things before plotting\r\n# (you can skip this and come back to it tomorrow if we haven't covered reshaping data yet)\r\n\r\n########################################\r\n# plot trip and weather data\r\n########################################\r\n\r\n# join trips and weather\r\ntrips_with_weather <- inner_join(trips, weather, by=\"ymd\")\r\n\r\n# plot the number of trips as a function of the minimum temperature, where each point represents a day\r\n# you'll need to summarize the trips and join to the weather data to do this\r\n\r\n# repeat this, splitting results by whether there was substantial precipitation or not\r\n# you'll need to decide what constitutes \"substantial precipitation\" and create a new T/F column to indicate this\r\n\r\n# add a smoothed fit on top of the previous plot, using geom_smooth\r\n\r\n# compute the average number of trips and standard deviation in number of trips by hour of the day\r\n# hint: use the hour() function from the lubridate package\r\n\r\n# plot the above\r\n\r\n# repeat this, but now split the results by day of the week (Monday, Tuesday, ...) or weekday vs. weekend days\r\n# hint: use the wday() function from the lubridate package\r\n"}}
{"ts":"2025-05-30T14:51:54.096Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","initialContent":"#!/bin/bash\n#\n\n# get date\n# parse date in a way where it is just numbers\n# don't select same team member (need to figure out combinations)\n#\n\n\ncd students\n\nname=($(ls | cut -d' ' -f1 | awk -F. '{print $1}'))\n\nday=$(date +%d)\n\ncombination=$((day % 11))\n\nif (( $combination > 6 )); then\n    iterations=$((combination - 6))\n    for ((i=0; i < iterations; i++)); do\n        reserve=${name[1]}\n        for ((j=1; j<12; j+=2)); do\n            if (( j+2 < 12 )); then\n                name[j]=${name[$((j+2))]}\n            else\n                name[j]=${name[$(((j+2) % 12))]}\n            fi\n        done\n        name[11]=$reserve\n    done\nelse\n    for ((i=0; i < combination; i++)); do\n        temp=${name[1]}\n        for ((j=2; j<12; j+=2)); do\n            if (( j == 2)); then\n                name[j-1]=${name[j]}\n            else\n                name[j-2]=${name[j]}\n            fi\n        done\n        name[10]=$temp\n    done\nfi\n\nfor ((i=0; i < 12; i++)); do\n    if (( i % 2 == 0)); then\n        echo \"--------------\"\n    fi\n    echo ${name[i]}\ndone\n\n\n"}}
{"ts":"2025-05-30T14:52:02.666Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","openedAt":1748616714091,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:52:02.666Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","openedAt":1748616714094,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:52:02.667Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","openedAt":1748616714096,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:52:09.311Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","initialContent":"library(dplyr)\r\nlibrary(readr)\r\n\r\n# define a function to turn strings into datetimes\r\nparse_datetime <- function(s, format = \"%Y-%m-%d %H:%M:%S\") {\r\n  as.POSIXct(as.character(s), format = format)\r\n}\r\n\r\n########################################\r\n# load and clean trip data\r\n########################################\r\n\r\n# load each month of the trip data into one big data frame\r\ncsvs <- Sys.glob(\"*-tripdata.csv\")\r\ntrips <- data.frame()\r\nfor (csv in csvs) {\r\n  print(csv)\r\n  tmp <- read_csv(csv, na = \"\\\\N\")\r\n\r\n  # the date format changed to something ugly in 2014-09 which read_csv doesn't recognize as a datetime,\r\n  # so manually convert the date from a string to a datetime\r\n  if (typeof(tmp$starttime) == \"character\") {\r\n    tmp <- mutate(tmp,\r\n      starttime = parse_datetime(starttime, \"%m/%d/%Y %H:%M\"),\r\n      stoptime = parse_datetime(stoptime, \"%m/%d/%Y %H:%M\")\r\n    )\r\n  }\r\n\r\n  trips <- rbind(trips, tmp)\r\n}\r\n\r\n# replace spaces in column names with underscores\r\nnames(trips) <- gsub(\" \", \"_\", names(trips))\r\n\r\n# add a column for year/month/day (without time of day)\r\ntrips <- mutate(trips, ymd = as.Date(starttime))\r\n\r\n# recode gender as a factor 0->\"Unknown\", 1->\"Male\", 2->\"Female\"\r\ntrips <- mutate(trips, gender = factor(gender, levels = c(0, 1, 2), labels = c(\"Unknown\", \"Male\", \"Female\")))\r\n\r\n########################################\r\n# load and clean weather data\r\n########################################\r\n\r\n# load weather data from belvedere tower in central park\r\n# https://www.ncei.noaa.gov/orders/cdo/2992179.csv\r\n# ordered from\r\n# http://www.ncdc.noaa.gov/cdo-web/datasets/GHCND/stations/GHCND:USW00094728/detail\r\nweather <- read.table(\"weather.csv\", header = T, sep = \",\")\r\n\r\n# extract just a few columns, lowercase column names, and parse dates\r\nweather <- select(weather, DATE, PRCP, SNWD, SNOW, TMAX, TMIN)\r\nnames(weather) <- tolower(names(weather))\r\nweather <- mutate(weather,\r\n  ymd = as.Date(parse_datetime(date, \"%Y-%m-%d\"))\r\n)\r\nweather <- tbl_df(weather)\r\n\r\n# save data frame for easy loading in the future\r\nsave(trips, weather, file = \"trips.RData\")\r\n"}}
{"ts":"2025-05-30T14:52:09.315Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","initialContent":"########################################\r\n# load libraries\r\n########################################\r\n\r\n# load some packages that we'll need\r\nlibrary(tidyverse)\r\nlibrary(scales)\r\n\r\n# be picky about white backgrounds on our plots\r\ntheme_set(theme_bw())\r\n\r\n# load RData file output by load_trips.R\r\nload('trips.RData')\r\n\r\n\r\n########################################\r\n# plot trip data\r\n########################################\r\n\r\n# plot the distribution of trip times across all rides (compare a histogram vs. a density plot)\r\n\r\nggplot(trips, aes(x = tripduration)) + geom_histogram()\r\n\r\n# plot the distribution of trip times by rider type indicated using color and fill (compare a histogram vs. a density plot)\r\n\r\n# plot the total number of trips on each day in the dataset\r\n\r\n# plot the total number of trips (on the y axis) by age (on the x axis) and gender (indicated with color)\r\n\r\n# plot the ratio of male to female trips (on the y axis) by age (on the x axis)\r\n# hint: use the pivot_wider() function to reshape things to make it easier to compute this ratio\r\n# (you can skip this and come back to it tomorrow if we haven't covered pivot_wider() yet)\r\n\r\n########################################\r\n# plot weather data\r\n########################################\r\n# plot the minimum temperature (on the y axis) over each day (on the x axis)\r\n\r\n# plot the minimum temperature and maximum temperature (on the y axis, with different colors) over each day (on the x axis)\r\n# hint: try using the pivot_longer() function for this to reshape things before plotting\r\n# (you can skip this and come back to it tomorrow if we haven't covered reshaping data yet)\r\n\r\n########################################\r\n# plot trip and weather data\r\n########################################\r\n\r\n# join trips and weather\r\ntrips_with_weather <- inner_join(trips, weather, by=\"ymd\")\r\n\r\n# plot the number of trips as a function of the minimum temperature, where each point represents a day\r\n# you'll need to summarize the trips and join to the weather data to do this\r\n\r\n# repeat this, splitting results by whether there was substantial precipitation or not\r\n# you'll need to decide what constitutes \"substantial precipitation\" and create a new T/F column to indicate this\r\n\r\n# add a smoothed fit on top of the previous plot, using geom_smooth\r\n\r\n# compute the average number of trips and standard deviation in number of trips by hour of the day\r\n# hint: use the hour() function from the lubridate package\r\n\r\n# plot the above\r\n\r\n# repeat this, but now split the results by day of the week (Monday, Tuesday, ...) or weekday vs. weekend days\r\n# hint: use the wday() function from the lubridate package\r\n"}}
{"ts":"2025-05-30T14:52:09.318Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","initialContent":"#!/bin/bash\n#\n\n# get date\n# parse date in a way where it is just numbers\n# don't select same team member (need to figure out combinations)\n#\n\n\ncd students\n\nname=($(ls | cut -d' ' -f1 | awk -F. '{print $1}'))\n\nday=$(date +%d)\n\ncombination=$((day % 11))\n\nif (( $combination > 6 )); then\n    iterations=$((combination - 6))\n    for ((i=0; i < iterations; i++)); do\n        reserve=${name[1]}\n        for ((j=1; j<12; j+=2)); do\n            if (( j+2 < 12 )); then\n                name[j]=${name[$((j+2))]}\n            else\n                name[j]=${name[$(((j+2) % 12))]}\n            fi\n        done\n        name[11]=$reserve\n    done\nelse\n    for ((i=0; i < combination; i++)); do\n        temp=${name[1]}\n        for ((j=2; j<12; j+=2)); do\n            if (( j == 2)); then\n                name[j-1]=${name[j]}\n            else\n                name[j-2]=${name[j]}\n            fi\n        done\n        name[10]=$temp\n    done\nfi\n\nfor ((i=0; i < 12; i++)); do\n    if (( i % 2 == 0)); then\n        echo \"--------------\"\n    fi\n    echo ${name[i]}\ndone\n\n\n"}}
{"ts":"2025-05-30T14:52:15.954Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","openedAt":1748616729311,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:52:15.955Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","openedAt":1748616729315,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:52:15.955Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","openedAt":1748616729318,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:52:19.404Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","initialContent":"library(dplyr)\r\nlibrary(readr)\r\n\r\n# define a function to turn strings into datetimes\r\nparse_datetime <- function(s, format = \"%Y-%m-%d %H:%M:%S\") {\r\n  as.POSIXct(as.character(s), format = format)\r\n}\r\n\r\n########################################\r\n# load and clean trip data\r\n########################################\r\n\r\n# load each month of the trip data into one big data frame\r\ncsvs <- Sys.glob(\"*-tripdata.csv\")\r\ntrips <- data.frame()\r\nfor (csv in csvs) {\r\n  print(csv)\r\n  tmp <- read_csv(csv, na = \"\\\\N\")\r\n\r\n  # the date format changed to something ugly in 2014-09 which read_csv doesn't recognize as a datetime,\r\n  # so manually convert the date from a string to a datetime\r\n  if (typeof(tmp$starttime) == \"character\") {\r\n    tmp <- mutate(tmp,\r\n      starttime = parse_datetime(starttime, \"%m/%d/%Y %H:%M\"),\r\n      stoptime = parse_datetime(stoptime, \"%m/%d/%Y %H:%M\")\r\n    )\r\n  }\r\n\r\n  trips <- rbind(trips, tmp)\r\n}\r\n\r\n# replace spaces in column names with underscores\r\nnames(trips) <- gsub(\" \", \"_\", names(trips))\r\n\r\n# add a column for year/month/day (without time of day)\r\ntrips <- mutate(trips, ymd = as.Date(starttime))\r\n\r\n# recode gender as a factor 0->\"Unknown\", 1->\"Male\", 2->\"Female\"\r\ntrips <- mutate(trips, gender = factor(gender, levels = c(0, 1, 2), labels = c(\"Unknown\", \"Male\", \"Female\")))\r\n\r\n########################################\r\n# load and clean weather data\r\n########################################\r\n\r\n# load weather data from belvedere tower in central park\r\n# https://www.ncei.noaa.gov/orders/cdo/2992179.csv\r\n# ordered from\r\n# http://www.ncdc.noaa.gov/cdo-web/datasets/GHCND/stations/GHCND:USW00094728/detail\r\nweather <- read.table(\"weather.csv\", header = T, sep = \",\")\r\n\r\n# extract just a few columns, lowercase column names, and parse dates\r\nweather <- select(weather, DATE, PRCP, SNWD, SNOW, TMAX, TMIN)\r\nnames(weather) <- tolower(names(weather))\r\nweather <- mutate(weather,\r\n  ymd = as.Date(parse_datetime(date, \"%Y-%m-%d\"))\r\n)\r\nweather <- tbl_df(weather)\r\n\r\n# save data frame for easy loading in the future\r\nsave(trips, weather, file = \"trips.RData\")\r\n"}}
{"ts":"2025-05-30T14:52:19.406Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","initialContent":"########################################\r\n# load libraries\r\n########################################\r\n\r\n# load some packages that we'll need\r\nlibrary(tidyverse)\r\nlibrary(scales)\r\n\r\n# be picky about white backgrounds on our plots\r\ntheme_set(theme_bw())\r\n\r\n# load RData file output by load_trips.R\r\nload('trips.RData')\r\n\r\n\r\n########################################\r\n# plot trip data\r\n########################################\r\n\r\n# plot the distribution of trip times across all rides (compare a histogram vs. a density plot)\r\n\r\nggplot(trips, aes(x = tripduration)) + geom_histogram()\r\n\r\n# plot the distribution of trip times by rider type indicated using color and fill (compare a histogram vs. a density plot)\r\n\r\n# plot the total number of trips on each day in the dataset\r\n\r\n# plot the total number of trips (on the y axis) by age (on the x axis) and gender (indicated with color)\r\n\r\n# plot the ratio of male to female trips (on the y axis) by age (on the x axis)\r\n# hint: use the pivot_wider() function to reshape things to make it easier to compute this ratio\r\n# (you can skip this and come back to it tomorrow if we haven't covered pivot_wider() yet)\r\n\r\n########################################\r\n# plot weather data\r\n########################################\r\n# plot the minimum temperature (on the y axis) over each day (on the x axis)\r\n\r\n# plot the minimum temperature and maximum temperature (on the y axis, with different colors) over each day (on the x axis)\r\n# hint: try using the pivot_longer() function for this to reshape things before plotting\r\n# (you can skip this and come back to it tomorrow if we haven't covered reshaping data yet)\r\n\r\n########################################\r\n# plot trip and weather data\r\n########################################\r\n\r\n# join trips and weather\r\ntrips_with_weather <- inner_join(trips, weather, by=\"ymd\")\r\n\r\n# plot the number of trips as a function of the minimum temperature, where each point represents a day\r\n# you'll need to summarize the trips and join to the weather data to do this\r\n\r\n# repeat this, splitting results by whether there was substantial precipitation or not\r\n# you'll need to decide what constitutes \"substantial precipitation\" and create a new T/F column to indicate this\r\n\r\n# add a smoothed fit on top of the previous plot, using geom_smooth\r\n\r\n# compute the average number of trips and standard deviation in number of trips by hour of the day\r\n# hint: use the hour() function from the lubridate package\r\n\r\n# plot the above\r\n\r\n# repeat this, but now split the results by day of the week (Monday, Tuesday, ...) or weekday vs. weekend days\r\n# hint: use the wday() function from the lubridate package\r\n"}}
{"ts":"2025-05-30T14:52:19.408Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","initialContent":"#!/bin/bash\n#\n\n# get date\n# parse date in a way where it is just numbers\n# don't select same team member (need to figure out combinations)\n#\n\n\ncd students\n\nname=($(ls | cut -d' ' -f1 | awk -F. '{print $1}'))\n\nday=$(date +%d)\n\ncombination=$((day % 11))\n\nif (( $combination > 6 )); then\n    iterations=$((combination - 6))\n    for ((i=0; i < iterations; i++)); do\n        reserve=${name[1]}\n        for ((j=1; j<12; j+=2)); do\n            if (( j+2 < 12 )); then\n                name[j]=${name[$((j+2))]}\n            else\n                name[j]=${name[$(((j+2) % 12))]}\n            fi\n        done\n        name[11]=$reserve\n    done\nelse\n    for ((i=0; i < combination; i++)); do\n        temp=${name[1]}\n        for ((j=2; j<12; j+=2)); do\n            if (( j == 2)); then\n                name[j-1]=${name[j]}\n            else\n                name[j-2]=${name[j]}\n            fi\n        done\n        name[10]=$temp\n    done\nfi\n\nfor ((i=0; i < 12; i++)); do\n    if (( i % 2 == 0)); then\n        echo \"--------------\"\n    fi\n    echo ${name[i]}\ndone\n\n\n"}}
{"ts":"2025-05-30T14:54:13.114Z","type":"window-focus","payload":{"focusedAt":"2025-05-30T14:54:13.114Z"}}
{"ts":"2025-05-30T14:54:13.379Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","openedAt":1748616739404,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:54:13.380Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","openedAt":1748616739408,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:54:13.380Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","openedAt":1748616739406,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:54:56.820Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","initialContent":"library(dplyr)\r\nlibrary(readr)\r\n\r\n# define a function to turn strings into datetimes\r\nparse_datetime <- function(s, format = \"%Y-%m-%d %H:%M:%S\") {\r\n  as.POSIXct(as.character(s), format = format)\r\n}\r\n\r\n########################################\r\n# load and clean trip data\r\n########################################\r\n\r\n# load each month of the trip data into one big data frame\r\ncsvs <- Sys.glob(\"*-tripdata.csv\")\r\ntrips <- data.frame()\r\nfor (csv in csvs) {\r\n  print(csv)\r\n  tmp <- read_csv(csv, na = \"\\\\N\")\r\n\r\n  # the date format changed to something ugly in 2014-09 which read_csv doesn't recognize as a datetime,\r\n  # so manually convert the date from a string to a datetime\r\n  if (typeof(tmp$starttime) == \"character\") {\r\n    tmp <- mutate(tmp,\r\n      starttime = parse_datetime(starttime, \"%m/%d/%Y %H:%M\"),\r\n      stoptime = parse_datetime(stoptime, \"%m/%d/%Y %H:%M\")\r\n    )\r\n  }\r\n\r\n  trips <- rbind(trips, tmp)\r\n}\r\n\r\n# replace spaces in column names with underscores\r\nnames(trips) <- gsub(\" \", \"_\", names(trips))\r\n\r\n# add a column for year/month/day (without time of day)\r\ntrips <- mutate(trips, ymd = as.Date(starttime))\r\n\r\n# recode gender as a factor 0->\"Unknown\", 1->\"Male\", 2->\"Female\"\r\ntrips <- mutate(trips, gender = factor(gender, levels = c(0, 1, 2), labels = c(\"Unknown\", \"Male\", \"Female\")))\r\n\r\n########################################\r\n# load and clean weather data\r\n########################################\r\n\r\n# load weather data from belvedere tower in central park\r\n# https://www.ncei.noaa.gov/orders/cdo/2992179.csv\r\n# ordered from\r\n# http://www.ncdc.noaa.gov/cdo-web/datasets/GHCND/stations/GHCND:USW00094728/detail\r\nweather <- read.table(\"weather.csv\", header = T, sep = \",\")\r\n\r\n# extract just a few columns, lowercase column names, and parse dates\r\nweather <- select(weather, DATE, PRCP, SNWD, SNOW, TMAX, TMIN)\r\nnames(weather) <- tolower(names(weather))\r\nweather <- mutate(weather,\r\n  ymd = as.Date(parse_datetime(date, \"%Y-%m-%d\"))\r\n)\r\nweather <- tbl_df(weather)\r\n\r\n# save data frame for easy loading in the future\r\nsave(trips, weather, file = \"trips.RData\")\r\n"}}
{"ts":"2025-05-30T14:54:56.824Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","initialContent":"########################################\r\n# load libraries\r\n########################################\r\n\r\n# load some packages that we'll need\r\nlibrary(tidyverse)\r\nlibrary(scales)\r\n\r\n# be picky about white backgrounds on our plots\r\ntheme_set(theme_bw())\r\n\r\n# load RData file output by load_trips.R\r\nload('trips.RData')\r\n\r\n\r\n########################################\r\n# plot trip data\r\n########################################\r\n\r\n# plot the distribution of trip times across all rides (compare a histogram vs. a density plot)\r\n\r\nggplot(trips, aes(x = tripduration)) + geom_histogram()\r\n\r\n# plot the distribution of trip times by rider type indicated using color and fill (compare a histogram vs. a density plot)\r\n\r\n# plot the total number of trips on each day in the dataset\r\n\r\n# plot the total number of trips (on the y axis) by age (on the x axis) and gender (indicated with color)\r\n\r\n# plot the ratio of male to female trips (on the y axis) by age (on the x axis)\r\n# hint: use the pivot_wider() function to reshape things to make it easier to compute this ratio\r\n# (you can skip this and come back to it tomorrow if we haven't covered pivot_wider() yet)\r\n\r\n########################################\r\n# plot weather data\r\n########################################\r\n# plot the minimum temperature (on the y axis) over each day (on the x axis)\r\n\r\n# plot the minimum temperature and maximum temperature (on the y axis, with different colors) over each day (on the x axis)\r\n# hint: try using the pivot_longer() function for this to reshape things before plotting\r\n# (you can skip this and come back to it tomorrow if we haven't covered reshaping data yet)\r\n\r\n########################################\r\n# plot trip and weather data\r\n########################################\r\n\r\n# join trips and weather\r\ntrips_with_weather <- inner_join(trips, weather, by=\"ymd\")\r\n\r\n# plot the number of trips as a function of the minimum temperature, where each point represents a day\r\n# you'll need to summarize the trips and join to the weather data to do this\r\n\r\n# repeat this, splitting results by whether there was substantial precipitation or not\r\n# you'll need to decide what constitutes \"substantial precipitation\" and create a new T/F column to indicate this\r\n\r\n# add a smoothed fit on top of the previous plot, using geom_smooth\r\n\r\n# compute the average number of trips and standard deviation in number of trips by hour of the day\r\n# hint: use the hour() function from the lubridate package\r\n\r\n# plot the above\r\n\r\n# repeat this, but now split the results by day of the week (Monday, Tuesday, ...) or weekday vs. weekend days\r\n# hint: use the wday() function from the lubridate package\r\n"}}
{"ts":"2025-05-30T14:54:56.825Z","type":"file-open","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","initialContent":"#!/bin/bash\n#\n\n# get date\n# parse date in a way where it is just numbers\n# don't select same team member (need to figure out combinations)\n#\n\n\ncd students\n\nname=($(ls | cut -d' ' -f1 | awk -F. '{print $1}'))\n\nday=$(date +%d)\n\ncombination=$((day % 11))\n\nif (( $combination > 6 )); then\n    iterations=$((combination - 6))\n    for ((i=0; i < iterations; i++)); do\n        reserve=${name[1]}\n        for ((j=1; j<12; j+=2)); do\n            if (( j+2 < 12 )); then\n                name[j]=${name[$((j+2))]}\n            else\n                name[j]=${name[$(((j+2) % 12))]}\n            fi\n        done\n        name[11]=$reserve\n    done\nelse\n    for ((i=0; i < combination; i++)); do\n        temp=${name[1]}\n        for ((j=2; j<12; j+=2)); do\n            if (( j == 2)); then\n                name[j-1]=${name[j]}\n            else\n                name[j-2]=${name[j]}\n            fi\n        done\n        name[10]=$temp\n    done\nfi\n\nfor ((i=0; i < 12; i++)); do\n    if (( i % 2 == 0)); then\n        echo \"--------------\"\n    fi\n    echo ${name[i]}\ndone\n\n\n"}}
{"ts":"2025-05-30T14:55:03.062Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/plot_trips.R","openedAt":1748616896824,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:55:03.062Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/load_trips.R","openedAt":1748616896820,"focusDurationMs":0,"focusedMs":0}}
{"ts":"2025-05-30T14:55:03.062Z","type":"file-close","payload":{"uri":"file:///c%3A/Users/ds3/Documents/coursework/week1/students/musical_pairs.sh","openedAt":1748616896825,"focusDurationMs":0,"focusedMs":0}}
